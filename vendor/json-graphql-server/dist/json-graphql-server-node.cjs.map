{"version":3,"file":"json-graphql-server-node.cjs","sources":["../node_modules/graphql-http/lib/utils.mjs","../node_modules/graphql-http/lib/handler.mjs","../node_modules/graphql-http/lib/use/express.mjs","../node_modules/graphql/language/kinds.mjs","../src/introspection/DateType.ts","../src/introspection/getTypeFromValues.ts","../src/introspection/getValuesFromEntities.ts","../src/introspection/getFieldsFromEntities.ts","../src/nameConverter.ts","../src/introspection/getTypesFromData.ts","../src/introspection/getFilterTypesFromData.ts","../src/relationships.ts","../src/introspection/getSchemaFromData.ts","../src/resolver/Query/applyFilters.ts","../src/resolver/Query/all.ts","../src/resolver/Query/meta.ts","../src/resolver/Query/single.ts","../src/resolver/Mutation/create.ts","../src/resolver/Mutation/createMany.ts","../src/resolver/Mutation/update.ts","../src/resolver/Mutation/remove.ts","../src/resolver/Entity/index.ts","../src/introspection/hasType.ts","../src/resolver/index.ts","../src/schemaBuilder.ts","../src/graphiqlHandler.ts","../src/jsonGraphqlExpress.ts","../src/node.ts"],"sourcesContent":["/**\n *\n * utils\n *\n */\n/** @private */\nexport function extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\n/** @private */\nexport function isObject(val) {\n    return typeof val === 'object' && val !== null;\n}\n/** @private */\nexport function isExecutionResult(val) {\n    return (isObject(val) &&\n        ('data' in val || ('data' in val && val.data == null && 'errors' in val)));\n}\n/** @private */\nexport function isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === 'function';\n}\n","/**\n *\n * handler\n *\n */\nimport { validate as graphqlValidate, specifiedRules, execute as graphqlExecute, parse as graphqlParse, getOperationAST as graphqlGetOperationAST, GraphQLError, } from 'graphql';\nimport { isAsyncIterable, isExecutionResult, isObject } from './utils.mjs';\n/** Checks whether the passed value is the `graphql-http` server agnostic response. */\nfunction isResponse(val) {\n    // Make sure the contents of body match string | null\n    if (!Array.isArray(val))\n        return false;\n    if (typeof val[0] !== 'string' && val[0] !== null)\n        return false;\n    if (!isObject(val[1]))\n        return false;\n    // Make sure the contents of init match ResponseInit\n    const init = val[1];\n    if (init.status && typeof init.status !== 'number')\n        return false;\n    if (init.statusText && typeof init.statusText !== 'string')\n        return false;\n    if (init.headers && !isObject(init.headers))\n        return false;\n    return true;\n}\n/**\n * The GraphQL over HTTP spec compliant request parser for an incoming GraphQL request.\n * It parses and validates the request itself, including the request method and the\n * content-type of the body.\n *\n * If the HTTP request itself is invalid or malformed, the function will return an\n * appropriate {@link Response}.\n *\n * If the HTTP request is valid, but is not a well-formatted GraphQL request, the\n * function will throw an error and it is up to the user to handle and respond as\n * they see fit.\n *\n * @category Server\n */\nexport async function parseRequestParams(req) {\n    var _a, _b;\n    const method = req.method;\n    if (method !== 'GET' && method !== 'POST') {\n        return [\n            null,\n            {\n                status: 405,\n                statusText: 'Method Not Allowed',\n                headers: {\n                    allow: 'GET, POST',\n                },\n            },\n        ];\n    }\n    const [mediaType, charset = 'charset=utf-8', // utf-8 is assumed when not specified. this parameter is either \"charset\" or \"boundary\" (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length)\n    ] = (getHeader(req, 'content-type') || '')\n        .replace(/\\s/g, '')\n        .toLowerCase()\n        .split(';');\n    const partParams = {};\n    switch (true) {\n        case method === 'GET': {\n            // TODO: what if content-type is specified and is not application/x-www-form-urlencoded?\n            try {\n                const [, search] = req.url.split('?');\n                const searchParams = new URLSearchParams(search);\n                partParams.operationName =\n                    (_a = searchParams.get('operationName')) !== null && _a !== void 0 ? _a : undefined;\n                partParams.query = (_b = searchParams.get('query')) !== null && _b !== void 0 ? _b : undefined;\n                const variables = searchParams.get('variables');\n                if (variables)\n                    partParams.variables = JSON.parse(variables);\n                const extensions = searchParams.get('extensions');\n                if (extensions)\n                    partParams.extensions = JSON.parse(extensions);\n            }\n            catch (_c) {\n                throw new Error('Unparsable URL');\n            }\n            break;\n        }\n        case method === 'POST' &&\n            mediaType === 'application/json' &&\n            charset === 'charset=utf-8':\n            {\n                if (!req.body) {\n                    throw new Error('Missing body');\n                }\n                let data;\n                try {\n                    const body = typeof req.body === 'function' ? await req.body() : req.body;\n                    data = typeof body === 'string' ? JSON.parse(body) : body;\n                }\n                catch (err) {\n                    throw new Error('Unparsable JSON body');\n                }\n                if (!isObject(data)) {\n                    throw new Error('JSON body must be an object');\n                }\n                partParams.operationName = data.operationName;\n                partParams.query = data.query;\n                partParams.variables = data.variables;\n                partParams.extensions = data.extensions;\n                break;\n            }\n        default: // graphql-http doesnt support any other content type\n            return [\n                null,\n                {\n                    status: 415,\n                    statusText: 'Unsupported Media Type',\n                },\n            ];\n    }\n    if (partParams.query == null)\n        throw new Error('Missing query');\n    if (typeof partParams.query !== 'string')\n        throw new Error('Invalid query');\n    if (partParams.variables != null &&\n        (typeof partParams.variables !== 'object' ||\n            Array.isArray(partParams.variables))) {\n        throw new Error('Invalid variables');\n    }\n    if (partParams.operationName != null &&\n        typeof partParams.operationName !== 'string') {\n        throw new Error('Invalid operationName');\n    }\n    if (partParams.extensions != null &&\n        (typeof partParams.extensions !== 'object' ||\n            Array.isArray(partParams.extensions))) {\n        throw new Error('Invalid extensions');\n    }\n    // request parameters are checked and now complete\n    return partParams;\n}\n/**\n * Makes a GraphQL over HTTP spec compliant server handler. The handler can\n * be used with your favorite server library.\n *\n * Beware that the handler resolves only after the whole operation completes.\n *\n * Errors thrown from **any** of the provided options or callbacks (or even due to\n * library misuse or potential bugs) will reject the handler's promise. They are\n * considered internal errors and you should take care of them accordingly.\n *\n * For production environments, its recommended not to transmit the exact internal\n * error details to the client, but instead report to an error logging tool or simply\n * the console.\n *\n * Simple example usage with Node:\n *\n * ```js\n * import http from 'http';\n * import { createHandler } from 'graphql-http';\n * import { schema } from './my-graphql-schema/index.mjs';\n *\n * // Create the GraphQL over HTTP handler\n * const handler = createHandler({ schema });\n *\n * // Create a HTTP server using the handler on `/graphql`\n * const server = http.createServer(async (req, res) => {\n *   if (!req.url.startsWith('/graphql')) {\n *     return res.writeHead(404).end();\n *   }\n *\n *   try {\n *     const [body, init] = await handler({\n *       url: req.url,\n *       method: req.method,\n *       headers: req.headers,\n *       body: () => new Promise((resolve) => {\n *         let body = '';\n *         req.on('data', (chunk) => (body += chunk));\n *         req.on('end', () => resolve(body));\n *       }),\n *       raw: req,\n *     });\n *     res.writeHead(init.status, init.statusText, init.headers).end(body);\n *   } catch (err) {\n *     // BEWARE not to transmit the exact internal error message in production environments\n *     res.writeHead(500).end(err.message);\n *   }\n * });\n *\n * server.listen(4000);\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server\n */\nexport function createHandler(options) {\n    const { schema, context, validate = graphqlValidate, validationRules = [], execute = graphqlExecute, parse = graphqlParse, getOperationAST = graphqlGetOperationAST, rootValue, onSubscribe, onOperation, formatError = (err) => err, parseRequestParams: optionsParseRequestParams = parseRequestParams, } = options;\n    return async function handler(req) {\n        let acceptedMediaType = null;\n        const accepts = (getHeader(req, 'accept') || '*/*')\n            .replace(/\\s/g, '')\n            .toLowerCase()\n            .split(',');\n        for (const accept of accepts) {\n            // accept-charset became obsolete, shouldnt be used (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset)\n            // TODO: handle the weight parameter \"q\"\n            const [mediaType, ...params] = accept.split(';');\n            const charset = (params === null || params === void 0 ? void 0 : params.find((param) => param.includes('charset='))) || 'charset=utf-8'; // utf-8 is assumed when not specified;\n            if (mediaType === 'application/graphql-response+json' &&\n                charset === 'charset=utf-8') {\n                acceptedMediaType = 'application/graphql-response+json';\n                break;\n            }\n            // application/json should be the default until watershed\n            if ((mediaType === 'application/json' ||\n                mediaType === 'application/*' ||\n                mediaType === '*/*') &&\n                (charset === 'charset=utf-8' || charset === 'charset=utf8')) {\n                acceptedMediaType = 'application/json';\n                break;\n            }\n        }\n        if (!acceptedMediaType) {\n            return [\n                null,\n                {\n                    status: 406,\n                    statusText: 'Not Acceptable',\n                    headers: {\n                        accept: 'application/graphql-response+json; charset=utf-8, application/json; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        let params;\n        try {\n            let paramsOrRes = await optionsParseRequestParams(req);\n            if (!paramsOrRes)\n                paramsOrRes = await parseRequestParams(req);\n            if (isResponse(paramsOrRes))\n                return paramsOrRes;\n            params = paramsOrRes;\n        }\n        catch (err) {\n            return makeResponse(err, acceptedMediaType, formatError);\n        }\n        let args;\n        const maybeResErrsOrArgs = await (onSubscribe === null || onSubscribe === void 0 ? void 0 : onSubscribe(req, params));\n        if (isResponse(maybeResErrsOrArgs))\n            return maybeResErrsOrArgs;\n        else if (isExecutionResult(maybeResErrsOrArgs) ||\n            areGraphQLErrors(maybeResErrsOrArgs))\n            return makeResponse(maybeResErrsOrArgs, acceptedMediaType, formatError);\n        else if (maybeResErrsOrArgs)\n            args = maybeResErrsOrArgs;\n        else {\n            if (!schema)\n                throw new Error('The GraphQL schema is not provided');\n            const { operationName, query, variables } = params;\n            let document;\n            try {\n                document = parse(query);\n            }\n            catch (err) {\n                return makeResponse(err, acceptedMediaType, formatError);\n            }\n            const resOrContext = typeof context === 'function' ? await context(req, params) : context;\n            if (isResponse(resOrContext))\n                return resOrContext;\n            const argsWithoutSchema = {\n                operationName,\n                document,\n                variableValues: variables,\n                contextValue: resOrContext,\n            };\n            if (typeof schema === 'function') {\n                const resOrSchema = await schema(req, argsWithoutSchema);\n                if (isResponse(resOrSchema))\n                    return resOrSchema;\n                args = Object.assign(Object.assign({}, argsWithoutSchema), { schema: resOrSchema });\n            }\n            else {\n                args = Object.assign(Object.assign({}, argsWithoutSchema), { schema });\n            }\n            let rules = specifiedRules;\n            if (typeof validationRules === 'function') {\n                rules = await validationRules(req, args, specifiedRules);\n            }\n            else {\n                rules = [...rules, ...validationRules];\n            }\n            const validationErrs = validate(args.schema, args.document, rules);\n            if (validationErrs.length) {\n                return makeResponse(validationErrs, acceptedMediaType, formatError);\n            }\n        }\n        let operation;\n        try {\n            const ast = getOperationAST(args.document, args.operationName);\n            if (!ast)\n                throw null;\n            operation = ast.operation;\n        }\n        catch (_a) {\n            return makeResponse(new GraphQLError('Unable to detect operation AST'), acceptedMediaType, formatError);\n        }\n        if (operation === 'subscription') {\n            return makeResponse(new GraphQLError('Subscriptions are not supported'), acceptedMediaType, formatError);\n        }\n        // mutations cannot happen over GETs\n        // https://graphql.github.io/graphql-over-http/draft/#sel-CALFJRPAAELBAAxwP\n        if (operation === 'mutation' && req.method === 'GET') {\n            return [\n                JSON.stringify({\n                    errors: [new GraphQLError('Cannot perform mutations over GET')],\n                }),\n                {\n                    status: 405,\n                    statusText: 'Method Not Allowed',\n                    headers: {\n                        allow: 'POST',\n                    },\n                },\n            ];\n        }\n        if (!('rootValue' in args)) {\n            args.rootValue = rootValue;\n        }\n        if (!('contextValue' in args)) {\n            const resOrContext = typeof context === 'function' ? await context(req, params) : context;\n            if (isResponse(resOrContext))\n                return resOrContext;\n            args.contextValue = resOrContext;\n        }\n        let result = await execute(args);\n        const maybeResponseOrResult = await (onOperation === null || onOperation === void 0 ? void 0 : onOperation(req, args, result));\n        if (isResponse(maybeResponseOrResult))\n            return maybeResponseOrResult;\n        else if (maybeResponseOrResult)\n            result = maybeResponseOrResult;\n        if (isAsyncIterable(result)) {\n            return makeResponse(new GraphQLError('Subscriptions are not supported'), acceptedMediaType, formatError);\n        }\n        return makeResponse(result, acceptedMediaType, formatError);\n    };\n}\n/**\n * Creates an appropriate GraphQL over HTTP response following the provided arguments.\n *\n * If the first argument is an `ExecutionResult`, the operation will be treated as \"successful\".\n *\n * If the first argument is (an array of) `GraphQLError`, or an `ExecutionResult` without the `data` field, it will be treated\n * the response will be constructed with the help of `acceptedMediaType` complying with the GraphQL over HTTP spec.\n *\n * If the first argument is an `Error`, the operation will be treated as a bad request responding with `400: Bad Request` and the\n * error will be present in the `ExecutionResult` style.\n */\nfunction makeResponse(resultOrErrors, acceptedMediaType, formatError) {\n    if (resultOrErrors instanceof Error &&\n        // because GraphQLError extends the Error class\n        !isGraphQLError(resultOrErrors)) {\n        return [\n            JSON.stringify({ errors: [formatError(resultOrErrors)] }, jsonErrorReplacer),\n            {\n                status: 400,\n                statusText: 'Bad Request',\n                headers: {\n                    'content-type': 'application/json; charset=utf-8',\n                },\n            },\n        ];\n    }\n    const errors = isGraphQLError(resultOrErrors)\n        ? [resultOrErrors]\n        : areGraphQLErrors(resultOrErrors)\n            ? resultOrErrors\n            : null;\n    if (errors) {\n        return [\n            JSON.stringify({ errors: errors.map(formatError) }, jsonErrorReplacer),\n            Object.assign(Object.assign({}, (acceptedMediaType === 'application/json'\n                ? {\n                    status: 200,\n                    statusText: 'OK',\n                }\n                : {\n                    status: 400,\n                    statusText: 'Bad Request',\n                })), { headers: {\n                    'content-type': acceptedMediaType === 'application/json'\n                        ? 'application/json; charset=utf-8'\n                        : 'application/graphql-response+json; charset=utf-8',\n                } }),\n        ];\n    }\n    return [\n        JSON.stringify('errors' in resultOrErrors && resultOrErrors.errors\n            ? Object.assign(Object.assign({}, resultOrErrors), { errors: resultOrErrors.errors.map(formatError) }) : resultOrErrors, jsonErrorReplacer),\n        {\n            status: 200,\n            statusText: 'OK',\n            headers: {\n                'content-type': acceptedMediaType === 'application/json'\n                    ? 'application/json; charset=utf-8'\n                    : 'application/graphql-response+json; charset=utf-8',\n            },\n        },\n    ];\n}\nfunction getHeader(req, key) {\n    if (typeof req.headers.get === 'function') {\n        return req.headers.get(key);\n    }\n    return Object(req.headers)[key];\n}\nfunction areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        obj.length > 0 &&\n        // if one item in the array is a GraphQLError, we're good\n        obj.some(isGraphQLError));\n}\nfunction isGraphQLError(obj) {\n    return obj instanceof GraphQLError;\n}\nfunction jsonErrorReplacer(_key, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nval) {\n    if (val instanceof Error &&\n        // GraphQL errors implement their own stringer\n        !isGraphQLError(val)) {\n        const error = val;\n        return {\n            // name: error.name, name is included in message\n            message: error.message,\n            // stack: error.stack, can leak sensitive details\n        };\n    }\n    return val;\n}\n","import { createHandler as createRawHandler, parseRequestParams as rawParseRequestParams, } from '../handler.mjs';\n/**\n * The GraphQL over HTTP spec compliant request parser for an incoming GraphQL request.\n *\n * If the HTTP request _is not_ a [well-formatted GraphQL over HTTP request](https://graphql.github.io/graphql-over-http/draft/#sec-Request), the function will respond\n * on the `Response` argument and return `null`.\n *\n * If the HTTP request _is_ a [well-formatted GraphQL over HTTP request](https://graphql.github.io/graphql-over-http/draft/#sec-Request), but is invalid or malformed,\n * the function will throw an error and it is up to the user to handle and respond as they see fit.\n *\n * ```js\n * import express from 'express'; // yarn add express\n * import { parseRequestParams } from 'graphql-http/lib/use/express';\n *\n * const app = express();\n * app.all('/graphql', async (req, res) => {\n *   try {\n *     const maybeParams = await parseRequestParams(req, res);\n *     if (!maybeParams) {\n *       // not a well-formatted GraphQL over HTTP request,\n *       // parser responded and there's nothing else to do\n *       return;\n *     }\n *\n *     // well-formatted GraphQL over HTTP request,\n *     // with valid parameters\n *     res.writeHead(200).end(JSON.stringify(maybeParams, null, '  '));\n *   } catch (err) {\n *     // well-formatted GraphQL over HTTP request,\n *     // but with invalid parameters\n *     res.writeHead(400).end(err.message);\n *   }\n * });\n *\n * app.listen({ port: 4000 });\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server/express\n */\nexport async function parseRequestParams(req, res) {\n    const rawReq = toRequest(req, res);\n    const paramsOrRes = await rawParseRequestParams(rawReq);\n    if (!('query' in paramsOrRes)) {\n        const [body, init] = paramsOrRes;\n        res.writeHead(init.status, init.statusText, init.headers).end(body);\n        return null;\n    }\n    return paramsOrRes;\n}\n/**\n * Create a GraphQL over HTTP spec compliant request handler for\n * the express framework.\n *\n * ```js\n * import express from 'express'; // yarn add express\n * import { createHandler } from 'graphql-http/lib/use/express';\n * import { schema } from './my-graphql-schema/index.mjs';\n *\n * const app = express();\n * app.all('/graphql', createHandler({ schema }));\n *\n * app.listen({ port: 4000 });\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server/express\n */\nexport function createHandler(options) {\n    const handle = createRawHandler(options);\n    return async function requestListener(req, res) {\n        try {\n            const [body, init] = await handle(toRequest(req, res));\n            res.writeHead(init.status, init.statusText, init.headers).end(body);\n        }\n        catch (err) {\n            // The handler shouldnt throw errors.\n            // If you wish to handle them differently, consider implementing your own request handler.\n            console.error('Internal error occurred during request handling. ' +\n                'Please check your implementation.', err);\n            res.writeHead(500).end();\n        }\n    };\n}\nfunction toRequest(req, res) {\n    return {\n        url: req.url,\n        method: req.method,\n        headers: req.headers,\n        body: () => {\n            if (req.body) {\n                // in case express has a body parser\n                return req.body;\n            }\n            return new Promise((resolve) => {\n                let body = '';\n                req.setEncoding('utf-8');\n                req.on('data', (chunk) => (body += chunk));\n                req.on('end', () => resolve(body));\n            });\n        },\n        raw: req,\n        context: { res },\n    };\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n","import { GraphQLScalarType, GraphQLError } from 'graphql';\nimport { Kind } from 'graphql/language';\n\nconst ISO_DATE_STRING_PATTERN = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/;\n\nexport const isISODateString = (value: any) => {\n    if (typeof value !== 'string') return false;\n    if (!ISO_DATE_STRING_PATTERN.test(value)) return false;\n    const d = new Date(value);\n    return d.toISOString() === value;\n};\n\nexport const GraphQLDate = 'Date';\n\nexport default new GraphQLScalarType({\n    name: GraphQLDate,\n    description: 'Date type',\n    parseValue(value: any) {\n        // value comes from the client\n        return new Date(value); // sent to resolvers\n    },\n    serialize(value: any) {\n        // value comes from resolvers\n        if (isISODateString(value)) return value;\n        return value.toISOString(); // sent to the client\n    },\n    parseLiteral(ast) {\n        // ast comes from parsing the query\n        // this is where you can validate and transform\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(\n                `Query error: Can only parse dates strings, got a: ${ast.kind}`,\n                {\n                    nodes: [ast],\n                },\n            );\n        }\n        if (Number.isNaN(Date.parse(ast.value))) {\n            throw new GraphQLError('Query error: not a valid date', {\n                nodes: [ast],\n            });\n        }\n        return new Date(ast.value);\n    },\n});\n","import {\n    GraphQLBoolean,\n    GraphQLFloat,\n    GraphQLID,\n    GraphQLInt,\n    GraphQLList,\n    GraphQLNonNull,\n    type GraphQLNullableType,\n    GraphQLString,\n} from 'graphql';\nimport { GraphQLJSON } from 'graphql-type-json';\nimport DateType, { isISODateString } from './DateType';\n\nconst isNumeric = (value: any) =>\n    !Number.isNaN(Number.parseFloat(value)) && Number.isFinite(value);\nconst valuesAreNumeric = (values: any[]) => values.every(isNumeric);\nconst isInteger = (value: any) => Number.isInteger(value);\nconst valuesAreInteger = (values: any[]) => values.every(isInteger);\nconst isBoolean = (value: any) => typeof value === 'boolean';\nconst valuesAreBoolean = (values: any[]) => values.every(isBoolean);\nconst isString = (value: any) => typeof value === 'string';\nconst valuesAreString = (values: any[]) => values.every(isString);\nconst isArray = (value: any) => Array.isArray(value);\nconst valuesAreArray = (values: any[]) => values.every(isArray);\nconst isDate = (value: any) => value instanceof Date || isISODateString(value);\nconst valuesAreDate = (values: any[]) => values.every(isDate);\nconst isObject = (value: any) =>\n    Object.prototype.toString.call(value) === '[object Object]';\nconst valuesAreObject = (values: any[]) => values.every(isObject);\n\nconst requiredTypeOrNormal = <GQLType extends GraphQLNullableType>(\n    type: GQLType,\n    isRequired: boolean,\n) => (isRequired ? new GraphQLNonNull(type) : type);\n\nexport default (name: string, values: any[] = [], isRequired = false) => {\n    if (name === 'id' || name.substr(name.length - 3) === '_id') {\n        return requiredTypeOrNormal(GraphQLID, isRequired);\n    }\n    if (values.length > 0) {\n        if (valuesAreArray(values)) {\n            const leafValues = values.reduce((agg, arr) => {\n                // biome-ignore lint/complexity/noForEach: <explanation>\n                arr.forEach((value: any) => agg.push(value));\n                return agg;\n            }, []);\n            if (valuesAreBoolean(leafValues)) {\n                return requiredTypeOrNormal(\n                    new GraphQLList(GraphQLBoolean),\n                    isRequired,\n                );\n            }\n            if (valuesAreString(leafValues)) {\n                return requiredTypeOrNormal(\n                    new GraphQLList(GraphQLString),\n                    isRequired,\n                );\n            }\n            if (valuesAreInteger(leafValues)) {\n                return requiredTypeOrNormal(\n                    new GraphQLList(GraphQLInt),\n                    isRequired,\n                );\n            }\n            if (valuesAreNumeric(leafValues)) {\n                return requiredTypeOrNormal(\n                    new GraphQLList(GraphQLFloat),\n                    isRequired,\n                );\n            }\n            if (valuesAreObject(leafValues)) {\n                return requiredTypeOrNormal(GraphQLJSON, isRequired);\n            }\n            return requiredTypeOrNormal(\n                new GraphQLList(GraphQLString),\n                isRequired,\n            ); // FIXME introspect further\n        }\n        if (valuesAreBoolean(values)) {\n            return requiredTypeOrNormal(GraphQLBoolean, isRequired);\n        }\n        if (valuesAreDate(values)) {\n            return requiredTypeOrNormal(DateType, isRequired);\n        }\n        if (valuesAreString(values)) {\n            return requiredTypeOrNormal(GraphQLString, isRequired);\n        }\n        if (valuesAreInteger(values)) {\n            return requiredTypeOrNormal(GraphQLInt, isRequired);\n        }\n        if (valuesAreNumeric(values)) {\n            return requiredTypeOrNormal(GraphQLFloat, isRequired);\n        }\n        if (valuesAreObject(values)) {\n            return requiredTypeOrNormal(GraphQLJSON, isRequired);\n        }\n    }\n    return requiredTypeOrNormal(GraphQLString, isRequired); // FIXME introspect further\n};\n","import type { Entity, EntityWithAllValues } from '../types';\n\n/**\n * Gets a list of values indexed by field based on a list of entities\n *\n * @example\n * const entities = [\n *     {\n *         id: 1,\n *         title: \"Lorem Ipsum\",\n *         views: 254,\n *         user_id: 123,\n *     },\n *     {\n *         id: 2,\n *         title: \"Sic Dolor amet\",\n *         views: 65,\n *         user_id: 456,\n *     },\n * ];\n * getValuesFromEntities(entities);\n * // {\n * //    id: [1, 2],\n * //    title: [\"Lorem Ipsum\", \"Sic Dolor amet\"],\n * //    views: [254, 65],\n * //    user_id: [123, 456],\n * // }\n */\nexport default (entities: Entity[]): EntityWithAllValues =>\n    entities.reduce((values, entity) => {\n        for (const fieldName of Object.keys(entity)) {\n            if (!values[fieldName]) {\n                values[fieldName] = [];\n            }\n            if (entity[fieldName] != null) {\n                values[fieldName].push(entity[fieldName]);\n            }\n        }\n        return values;\n    }, {});\n","import type { Entity } from '../types';\nimport getTypeFromValues from './getTypeFromValues';\nimport getValuesFromEntities from './getValuesFromEntities';\n\n/**\n * Get a list of GraphQL fields from a list of entities\n *\n * @example\n * const entities = [\n *     {\n *         \"id\": 1,\n *         \"title\": \"Lorem Ipsum\",\n *         \"views\": 254,\n *         \"user_id\": 123,\n *     },\n *     {\n *         \"id\": 2,\n *         \"title\": \"Sic Dolor amet\",\n *         \"user_id\": 456,\n *     },\n * ];\n * const types = getFieldsFromEntities(entities);\n * // {\n * //    id: { type: new GraphQLNonNull(GraphQLString) },\n * //    title: { type: new GraphQLNonNull(GraphQLString) },\n * //    views: { type: GraphQLInt },\n * //    user_id: { type: new GraphQLNonNull(GraphQLString) },\n * // };\n */\nexport default (entities: Entity[], checkRequired = true) => {\n    const fieldValues = getValuesFromEntities(entities);\n    const nbValues = entities.length;\n    return Object.keys(fieldValues).reduce(\n        (fields, fieldName) => {\n            fields[fieldName] = {\n                type: getTypeFromValues(\n                    fieldName,\n                    fieldValues[fieldName],\n                    checkRequired\n                        ? fieldValues[fieldName].length === nbValues\n                        : false,\n                ),\n            };\n            return fields;\n        },\n        {} as Record<string, any>,\n    );\n};\n","import { camelize, pluralize, singularize } from 'inflection';\n\n/**\n * A bit of vocabulary\n *\n * Consider this data:\n * {\n *     posts: [\n *          { id: 1, title: 'foo', user_id: 123 }\n *     ],\n *     users: [\n *          { id: 123, name: 'John Doe' }\n *     ]\n * }\n *\n * We'll use the following names:\n * - key: the keys in the data map, e.g. 'posts', 'users'\n * - type: for a key, the related type in the graphQL schema, e.g. 'posts' => 'Post', 'users' => 'User'\n * - field: the keys in a record, e.g. 'id', 'foo', user_id'\n * - relationship field: a key ending in '_id', e.g. 'user_id'\n * - related key: for a relationship field, the related key, e.g. 'user_id' => 'users'\n */\n\n/**\n *\n * @param {String} fieldName 'users'\n * @return {String} 'Users'\n */\nexport const getRelationshipFromKey = (key: string) => camelize(key);\n\n/**\n *\n * @param {String} fieldName 'users'\n * @return {String} 'User'\n */\nexport const getTypeFromKey = (key: string) => camelize(singularize(key));\n\n/**\n *\n * @param {String} fieldName 'user_id'\n * @return {String} 'users'\n */\nexport const getRelatedKey = (fieldName: string) =>\n    pluralize(fieldName.substr(0, fieldName.length - 3));\n\n/**\n *\n * @param {String} key 'users'\n * @return {String} 'user_id'\n */\nexport const getReverseRelatedField = (key: string) => `${singularize(key)}_id`;\n\n/**\n *\n * @param {String} fieldName 'user_id'\n * @return {String} 'User'\n */\nexport const getRelatedType = (fieldName: string) =>\n    getTypeFromKey(fieldName.substr(0, fieldName.length - 3));\n","import { GraphQLObjectType } from 'graphql';\nimport { singularize, camelize } from 'inflection';\n\nimport getFieldsFromEntities from './getFieldsFromEntities';\nimport { getTypeFromKey } from '../nameConverter';\nimport type { Data } from '../types';\n\n/**\n * Get a list of GraphQLObjectType from data\n *\n * @example\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n * const types = getTypesFromData(data);\n * // [\n * //     new GraphQLObjectType({\n * //         name: \"Posts\",\n * //         fields: {\n * //             id: { type: graphql.GraphQLString },\n * //             title: { type: graphql.GraphQLString },\n * //             views: { type: graphql.GraphQLInt },\n * //             user_id: { type: graphql.GraphQLString },\n * //         }\n * //     }),\n * //     new GraphQLObjectType({\n * //         name: \"Users\",\n * //         fields: {\n * //             id: { type: graphql.GraphQLString },\n * //             name: { type: graphql.GraphQLString },\n * //         }\n * //     }),\n * // ]\n */\nexport default (data: Data) =>\n    Object.keys(data)\n        .map((typeName) => ({\n            name: camelize(singularize(typeName)),\n            fields: getFieldsFromEntities(data[typeName]),\n        }))\n        .map((typeObject) => new GraphQLObjectType(typeObject));\n\nexport const getTypeNamesFromData = (data: Data) =>\n    Object.keys(data).map(getTypeFromKey);\n","import {\n    GraphQLBoolean,\n    GraphQLInputObjectType,\n    GraphQLString,\n    GraphQLInt,\n    GraphQLFloat,\n    GraphQLList,\n    GraphQLID,\n    isListType,\n} from 'graphql';\nimport getFieldsFromEntities from './getFieldsFromEntities';\nimport getValuesFromEntities from './getValuesFromEntities';\nimport getTypeFromValues from './getTypeFromValues';\nimport { getTypeFromKey } from '../nameConverter';\nimport { GraphQLDate } from './DateType';\nimport type { Data, Entity } from '../types';\n\nconst getRangeFiltersFromEntities = (entities: Entity[]) => {\n    const fieldValues = getValuesFromEntities(entities);\n    return Object.keys(fieldValues).reduce((fields, fieldName) => {\n        const fieldType = getTypeFromValues(\n            fieldName,\n            fieldValues[fieldName],\n            false\n        );\n\n        if (isListType(fieldType)) {\n            return fields;\n        }\n        if (\n            fieldType === GraphQLInt ||\n            fieldType === GraphQLFloat ||\n            fieldType === GraphQLString ||\n            fieldType.name === GraphQLDate\n        ) {\n            fields[`${fieldName}_lt`] = { type: fieldType };\n            fields[`${fieldName}_lte`] = { type: fieldType };\n            fields[`${fieldName}_gt`] = { type: fieldType };\n            fields[`${fieldName}_gte`] = { type: fieldType };\n        }\n\n        if (fieldType !== GraphQLBoolean) {\n            fields[`${fieldName}_neq`] = { type: fieldType };\n        }\n        return fields;\n    }, {} as Record<string, any>);\n};\n\n/**\n * Get a list of GraphQLObjectType for filtering data\n *\n * @example\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n * const types = getFilterTypesFromData(data);\n * // {\n * //     posts: new GraphQLInputObjectType({\n * //         name: \"PostFilter\",\n * //         fields: {\n * //             q: { type: GraphQLString },\n * //             id: { type: GraphQLString },\n * //             title: { type: GraphQLString },\n * //             views: { type: GraphQLInt },\n * //             views_lt: { type: GraphQLInt },\n * //             views_lte: { type: GraphQLInt },\n * //             views_gt: { type: GraphQLInt },\n * //             views_gte: { type: GraphQLInt },\n * //             user_id: { type: GraphQLString },\n * //         }\n * //     }),\n * //     users: new GraphQLObjectType({\n * //         name: \"UserFilter\",\n * //         fields: {\n * //             q: { type: GraphQLString },\n * //             id: { type: GraphQLString },\n * //             name: { type: GraphQLString },\n * //         }\n * //     }),\n * // }\n */\nexport default (data: Data) =>\n    Object.keys(data).reduce(\n        (types, key) =>\n            Object.assign({}, types, {\n                [getTypeFromKey(key)]: new GraphQLInputObjectType({\n                    name: `${getTypeFromKey(key)}Filter`,\n                    fields: Object.assign(\n                        {\n                            q: { type: GraphQLString },\n                        },\n                        {\n                            ids: { type: new GraphQLList(GraphQLID) },\n                        },\n                        getFieldsFromEntities(data[key], false),\n                        getRangeFiltersFromEntities(data[key]),\n                    ),\n                }),\n            }),\n        {} as Record<string, any>,\n    );\n","export const isRelationshipField = (fieldName: string) =>\n    fieldName.endsWith('_id');\n","import {\n    GraphQLID,\n    GraphQLInt,\n    GraphQLList,\n    GraphQLNonNull,\n    GraphQLObjectType,\n    GraphQLInputObjectType,\n    GraphQLSchema,\n    GraphQLString,\n    parse,\n    extendSchema,\n} from 'graphql';\nimport { pluralize, camelize } from 'inflection';\n\nimport getTypesFromData from './getTypesFromData';\nimport getFilterTypesFromData from './getFilterTypesFromData';\nimport { isRelationshipField } from '../relationships';\nimport { getRelatedType } from '../nameConverter';\nimport type { Data } from '../types';\n\n/**\n * Get a GraphQL schema from data\n *\n * @example\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n * const types = getTypesFromData(data);\n * // type Post {\n * //     id: ID\n * //     title: String\n * //     views: Int\n * //     user_id: ID\n * // }\n * //\n * // type User {\n * //     id: ID\n * //     name: String\n * // }\n * //\n * // type Query {\n * //     Post(id: ID!): Post\n * //     allPosts(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: PostFilter): [Post]\n * //     User(id: ID!): User\n * //     allUsers(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: UserFilter): [User]\n * // }\n * //\n * // type Mutation {\n * //     createPost(data: String): Post\n * //     updatePost(data: String): Post\n * //     removePost(id: ID!): Boolean\n * //     deletePost(id: ID!): Boolean\n * //     createUser(data: String): User\n * //     updateUser(data: String): User\n * //     removeUser(id: ID!): Boolean\n * //     deleteUser(id: ID!): Boolean\n * // }\n */\nexport default (data: Data) => {\n    const types = getTypesFromData(data);\n    const typesByName = types.reduce(\n        (types, type) => {\n            types[type.name] = type;\n            return types;\n        },\n        {} as Record<string, GraphQLObjectType>,\n    );\n\n    const filterTypesByName = getFilterTypesFromData(data);\n\n    const listMetadataType = new GraphQLObjectType({\n        name: 'ListMetadata',\n        fields: {\n            count: { type: GraphQLInt },\n        },\n    });\n\n    const queryType = new GraphQLObjectType({\n        name: 'Query',\n        fields: types.reduce(\n            (fields, type) => {\n                fields[type.name] = {\n                    type: typesByName[type.name],\n                    args: {\n                        id: { type: new GraphQLNonNull(GraphQLID) },\n                    },\n                };\n                fields[`all${camelize(pluralize(type.name))}`] = {\n                    type: new GraphQLList(typesByName[type.name]),\n                    args: {\n                        page: { type: GraphQLInt },\n                        perPage: { type: GraphQLInt },\n                        sortField: { type: GraphQLString },\n                        sortOrder: { type: GraphQLString },\n                        filter: { type: filterTypesByName[type.name] },\n                    },\n                };\n                fields[`_all${camelize(pluralize(type.name))}Meta`] = {\n                    type: listMetadataType,\n                    args: {\n                        page: { type: GraphQLInt },\n                        perPage: { type: GraphQLInt },\n                        filter: { type: filterTypesByName[type.name] },\n                    },\n                };\n                return fields;\n            },\n            {} as Record<string, any>,\n        ),\n    });\n\n    const mutationType = new GraphQLObjectType({\n        name: 'Mutation',\n        fields: types.reduce(\n            (fields, type) => {\n                const typeFields = typesByName[type.name].getFields();\n                const nullableTypeFields = Object.keys(typeFields).reduce(\n                    (f, fieldName) => {\n                        f[fieldName] = Object.assign(\n                            {},\n                            typeFields[fieldName],\n                            {\n                                type:\n                                    fieldName !== 'id' &&\n                                    typeFields[fieldName].type instanceof\n                                        GraphQLNonNull\n                                        ? typeFields[fieldName].type.ofType\n                                        : typeFields[fieldName].type,\n                            },\n                        );\n                        return f;\n                    },\n                    {} as Record<string, any>,\n                );\n                const { id, ...createFields } = typeFields;\n\n                // Build input type.\n                const inputFields = Object.keys(createFields).reduce(\n                    (f, fieldName) => {\n                        f[fieldName] = Object.assign(\n                            {},\n                            createFields[fieldName],\n                        );\n                        // biome-ignore lint/performance/noDelete: <explanation>\n                        delete f[fieldName].resolve;\n                        return f;\n                    },\n                    {} as Record<string, any>,\n                );\n\n                const createManyInputType = new GraphQLInputObjectType({\n                    name: `${type.name}Input`,\n                    fields: inputFields,\n                });\n\n                fields[`create${type.name}`] = {\n                    type: typesByName[type.name],\n                    args: createFields,\n                };\n                fields[`createMany${type.name}`] = {\n                    type: new GraphQLList(typesByName[type.name]),\n                    args: {\n                        data: {\n                            type: new GraphQLList(createManyInputType),\n                        },\n                    },\n                };\n                fields[`update${type.name}`] = {\n                    type: typesByName[type.name],\n                    args: nullableTypeFields,\n                };\n                fields[`remove${type.name}`] = {\n                    type: typesByName[type.name],\n                    args: {\n                        id: { type: new GraphQLNonNull(GraphQLID) },\n                    },\n                };\n                fields[`delete${type.name}`] = {\n                    type: typesByName[type.name],\n                    args: {\n                        id: { type: new GraphQLNonNull(GraphQLID) },\n                    },\n                };\n                return fields;\n            },\n            {} as Record<string, any>,\n        ),\n    });\n\n    const schema = new GraphQLSchema({\n        query: queryType,\n        mutation: mutationType,\n    });\n\n    /**\n     * extend schema to add relationship fields\n     *\n     * @example\n     * If the `post` key contains a 'user_id' field, then\n     * add one-to-many and many-to-one type extensions:\n     *     extend type Post { User: User }\n     *     extend type User { Posts: [Post] }\n     */\n\n    const schemaExtension = Object.values(typesByName).reduce((ext, type) => {\n        let newExtension = `${ext}`;\n        for (const fieldName of Object.keys(type.getFields()).filter(\n            isRelationshipField,\n        )) {\n            const relType = getRelatedType(fieldName);\n            const rel = pluralize(type.toString());\n            newExtension = `${newExtension}\n    extend type ${type} { ${relType}: ${relType} }\n    extend type ${relType} { ${rel}: [${type}] }`;\n        }\n        return newExtension;\n    }, '');\n\n    return schemaExtension\n        ? extendSchema(schema, parse(schemaExtension))\n        : schema;\n};\n","import type { Entity } from '../../types';\n\nexport default (\n    entityData: Entity[] = [],\n    filter: Record<string, any> = {},\n) => {\n    let items = [...entityData];\n\n    if (filter.ids) {\n        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n        items = items.filter((d) => filter.ids.some((id: any) => id == d.id));\n    } else {\n        // biome-ignore lint/complexity/noForEach: <explanation>\n        Object.keys(filter)\n            .filter((key) => key !== 'q')\n            .forEach((key) => {\n                if (key.indexOf('_neq') !== -1) {\n                    // not equal to\n                    const realKey = key.replace(/(_neq)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                            return d[realKey] != filter[key].toISOString();\n                        }\n                        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                        return d[realKey] != filter[key];\n                    });\n                    return;\n                }\n                if (key.indexOf('_lte') !== -1) {\n                    // less than or equal\n                    const realKey = key.replace(/(_lte)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            return d[realKey] <= filter[key].toISOString();\n                        }\n                        return d[realKey] <= filter[key];\n                    });\n                    return;\n                }\n                if (key.indexOf('_gte') !== -1) {\n                    // less than or equal\n                    const realKey = key.replace(/(_gte)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            return d[realKey] >= filter[key].toISOString();\n                        }\n                        return d[realKey] >= filter[key];\n                    });\n                    return;\n                }\n                if (key.indexOf('_lt') !== -1) {\n                    // less than or equal\n                    const realKey = key.replace(/(_lt)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            return d[realKey] < filter[key].toISOString();\n                        }\n                        return d[realKey] < filter[key];\n                    });\n                    return;\n                }\n                if (key.indexOf('_gt') !== -1) {\n                    // less than or equal\n                    const realKey = key.replace(/(_gt)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            return d[realKey] > filter[key].toISOString();\n                        }\n                        return d[realKey] > filter[key];\n                    });\n                    return;\n                }\n\n                if (Array.isArray(filter[key])) {\n                    items = items.filter((item) => {\n                        if (Array.isArray(item[key])) {\n                            // array filter and array item value: where all items in values\n                            return filter[key].every((v: any) =>\n                                item[key].some((itemValue: any) => {\n                                    if (\n                                        v instanceof Date &&\n                                        typeof itemValue === 'string'\n                                    ) {\n                                        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                                        return itemValue == v.toISOString();\n                                    }\n                                    // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                                    return itemValue == v;\n                                }),\n                            );\n                        }\n                        // where item in values\n                        return (\n                            filter[key].filter((v: any) => {\n                                if (\n                                    v instanceof Date &&\n                                    typeof item[key] === 'string'\n                                ) {\n                                    // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                                    return item[key] == v.toISOString();\n                                }\n                                // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                                return v == item[key];\n                            }).length > 0\n                        );\n                    });\n                } else {\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[key] === 'string'\n                        ) {\n                            // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                            return d[key] == filter[key].toISOString();\n                        }\n                        return filter[key] instanceof Date\n                            ? // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                              +d[key] == +filter[key]\n                            : // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                              d[key] == filter[key];\n                    });\n                }\n            });\n\n        if (filter.q) {\n            items = items.filter((d) =>\n                Object.keys(d).some((key) =>\n                    d[key]\n                        ?.toString()\n                        .toLowerCase()\n                        .includes(filter.q.toLowerCase()),\n                ),\n            );\n        }\n    }\n\n    return items;\n};\n","import type { Entity } from '../../types';\nimport applyFilters from './applyFilters';\n\nexport default (entityData: Entity[] = []) =>\n    (\n        _: any,\n        {\n            sortField,\n            sortOrder = 'asc',\n            page,\n            perPage = 25,\n            filter = {},\n        }: {\n            sortField?: string;\n            sortOrder?: string;\n            page?: number;\n            perPage?: number;\n            filter?: Record<string, any>;\n        },\n    ) => {\n        let items = [...entityData];\n\n        if (sortField) {\n            // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n            const direction = sortOrder.toLowerCase() == 'asc' ? 1 : -1;\n            items = items.sort((a, b) => {\n                if (a[sortField] > b[sortField]) {\n                    return direction;\n                }\n                if (a[sortField] < b[sortField]) {\n                    return -1 * direction;\n                }\n                return 0;\n            });\n        }\n\n        items = applyFilters(items, filter);\n\n        if (page !== undefined && perPage) {\n            items = items.slice(page * perPage, page * perPage + perPage);\n        }\n\n        return items;\n    };\n","import type { Entity } from '../../types';\nimport applyFilters from './applyFilters';\n\nexport default (entityData: Entity[]) =>\n    (_: any, { filter = {} }: { filter: Record<string, any> }) => {\n        const items = applyFilters(entityData, filter);\n\n        return { count: items.length };\n    };\n","import type { Entity } from '../../types';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, { id }: { id?: any }) =>\n        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n        entityData.find((d) => d.id == id);\n","import type { Entity } from '../../types';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, entity: Entity) => {\n        const newId =\n            entityData.length > 0\n                ? entityData[entityData.length - 1].id + 1\n                : 0;\n        const newEntity = Object.assign({}, entity, { id: entity.id ?? newId });\n        entityData.push(newEntity);\n        return newEntity;\n    };\n","import type { Entity } from '../../types';\nimport create from './create';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, entities: { data: Entity[] }) => {\n        return entities.data.map((e) => create(entityData)(null, e));\n    };\n","import type { Entity } from '../../types';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, params: Entity) => {\n        let updatedEntity = undefined;\n        if (params.id != null) {\n            const stringId = params.id.toString();\n            const indexOfEntity = entityData.findIndex(\n                (e) => e.id != null && e.id.toString() === stringId,\n            );\n            if (indexOfEntity !== -1) {\n                entityData[indexOfEntity] = Object.assign(\n                    {},\n                    entityData[indexOfEntity],\n                    params,\n                );\n                updatedEntity = entityData[indexOfEntity];\n            }\n        }\n        return updatedEntity;\n    };\n","import type { Entity } from '../../types';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, { id }: { id?: any }) => {\n        let removedEntity = undefined;\n        if (id != null) {\n            const stringId = id.toString();\n            const indexOfEntity = entityData.findIndex(\n                (e) => e.id != null && e.id.toString() === stringId,\n            );\n\n            if (indexOfEntity !== -1) {\n                removedEntity = entityData.splice(indexOfEntity, 1)[0];\n            }\n        }\n        return removedEntity;\n    };\n","import getFieldsFromEntities from '../../introspection/getFieldsFromEntities';\nimport {\n    getRelatedKey,\n    getRelatedType,\n    getRelationshipFromKey,\n    getReverseRelatedField,\n} from '../../nameConverter';\nimport { isRelationshipField } from '../../relationships';\nimport type { Data, Entity } from '../../types';\n\n/**\n * Add resolvers for relationship fields\n *\n * @example\n * Consider this data:\n *\n *     {\n *         posts: [\n *              { id: 1, title: 'Hello, world', user_id: 123 }\n *         ],\n *         users: [\n *              { id: 123, name: 'John Doe' }\n *         ]\n *         comments: [\n *              { id: 4646, post_id: 1, body: 'Nice post!' }\n *         ]\n *     }\n *\n * There are two relationship fields here, posts.user_id and comments.post_id.\n * The generated GraphQL schema for posts is:\n *\n *     type Post {\n *         id: ID!\n *         title: String\n *         user_id: ID\n *         User: User\n *         Comments: [Comment]\n *     }\n *\n * When called for the posts entity, this method generates resolvers\n * for Post.User and Post.Comments\n *\n * @param {String} entityName The entity key in the data map, e.g. \"posts\"\n * @param {Object} data The entire data map, e.g. { posts: [], users: [] }\n *\n * @return {Object} resolvers, e.g.\n *\n *     {\n *         Post: {\n *             User: (post) => users.find(user => user.id == post.user_id),\n *             Comments: (post) => comments.filter(comment => comment.post_id = post.id),\n *         },\n *     }\n */\nexport default (entityName: string, data: Data): Record<string, any> => {\n    const entityFields = Object.keys(getFieldsFromEntities(data[entityName]));\n    const manyToOneResolvers = entityFields.filter(isRelationshipField).reduce(\n        (resolvers, fieldName) =>\n            Object.assign({}, resolvers, {\n                [getRelatedType(fieldName)]: (entity: Entity) =>\n                    data[getRelatedKey(fieldName)].find(\n                        (relatedRecord) =>\n                            // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                            relatedRecord.id == entity[fieldName],\n                    ),\n            }),\n        {},\n    );\n    const relatedField = getReverseRelatedField(entityName); // 'posts' => 'post_id'\n\n    const hasReverseRelationship = (entityName: string) =>\n        Object.keys(getFieldsFromEntities(data[entityName])).includes(\n            relatedField,\n        );\n\n    const entities = Object.keys(data);\n    const oneToManyResolvers = entities.filter(hasReverseRelationship).reduce(\n        (resolvers, entityName) =>\n            Object.assign({}, resolvers, {\n                [getRelationshipFromKey(entityName)]: (entity: Entity) =>\n                    data[entityName].filter(\n                        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                        (record) => record[relatedField] == entity.id,\n                    ),\n            }),\n        {},\n    );\n\n    return Object.assign({}, manyToOneResolvers, oneToManyResolvers);\n};\n","import type { GraphQLObjectType } from 'graphql';\nimport type { Data } from '../types';\nimport getFilterTypesFromData from './getFilterTypesFromData';\n\nexport default (name: string, data: Data) =>\n    Object.values(getFilterTypesFromData(data)).reduce(\n        (hasJSON, type: GraphQLObjectType) => {\n            if (hasJSON) return true;\n            return Object.values(type.getFields()).reduce(\n                (hasJSONField, field: any) => {\n                    if (hasJSONField) return true;\n                    // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                    return field.type.name == name;\n                },\n                false,\n            );\n        },\n        false,\n    );\n","import { pluralize } from 'inflection';\nimport { GraphQLJSON } from 'graphql-type-json';\n\nimport all from './Query/all';\nimport meta from './Query/meta';\nimport single from './Query/single';\nimport create from './Mutation/create';\nimport createMany from './Mutation/createMany';\nimport update from './Mutation/update';\nimport remove from './Mutation/remove';\nimport entityResolver from './Entity';\nimport { getTypeFromKey } from '../nameConverter';\nimport DateType, { GraphQLDate } from '../introspection/DateType';\nimport hasType from '../introspection/hasType';\nimport type { Data, Entity } from '../types';\n\nconst getQueryResolvers = (entityName: string, data: Entity[]) => ({\n    [`all${pluralize(entityName)}`]: all(data),\n    [`_all${pluralize(entityName)}Meta`]: meta(data),\n    [entityName]: single(data),\n});\n\nconst getMutationResolvers = (entityName: string, data: Entity[]) => ({\n    [`create${entityName}`]: create(data),\n    [`createMany${entityName}`]: createMany(data),\n    [`update${entityName}`]: update(data),\n    [`remove${entityName}`]: remove(data),\n    [`delete${entityName}`]: remove(data),\n});\n\nexport default (data: Data) => {\n    return Object.assign(\n        {},\n        {\n            Query: Object.keys(data).reduce(\n                (resolvers, key) =>\n                    Object.assign(\n                        {},\n                        resolvers,\n                        getQueryResolvers(getTypeFromKey(key), data[key]),\n                    ),\n                {},\n            ),\n            Mutation: Object.keys(data).reduce(\n                (resolvers, key) =>\n                    Object.assign(\n                        {},\n                        resolvers,\n                        getMutationResolvers(getTypeFromKey(key), data[key]),\n                    ),\n                {},\n            ),\n        },\n        Object.keys(data).reduce(\n            (resolvers, key) =>\n                Object.assign({}, resolvers, {\n                    [getTypeFromKey(key)]: entityResolver(key, data),\n                }),\n            {},\n        ),\n        hasType(GraphQLDate, data) ? { Date: DateType } : {}, // required because makeExecutableSchema strips resolvers from typeDefs\n        hasType('JSON', data) ? { JSON: GraphQLJSON } : {}, // required because makeExecutableSchema strips resolvers from typeDefs\n    );\n};\n","import { makeExecutableSchema } from '@graphql-tools/schema';\nimport { printSchema } from 'graphql';\nimport getSchemaFromData from './introspection/getSchemaFromData';\nimport resolver from './resolver';\nimport type { Data } from './types';\n\n/**\n * Generates a GraphQL Schema object for your data\n *\n * @param {any} data\n * @returns A GraphQL Schema\n *\n * @example\n * import {graphql} from 'graphql';\n * import {jsonSchemaBuilder} from 'json-graphql-server';\n *\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n *\n * const schema = jsonSchemaBuilder(data);\n * const query = `[...]`\n * graphql(schema, query).then(result => {\n *   console.log(result);\n * });\n *\n */\nexport default (data: Data) =>\n    makeExecutableSchema({\n        typeDefs: printSchema(getSchemaFromData(data)),\n        resolvers: resolver(data),\n    });\n\n// Same as above, simply returning the object before making it executable.\n// This lets you use it with a custom apollo server or etc.\nexport const getPlainSchema = (data: Data) => ({\n    typeDefs: printSchema(getSchemaFromData(data)),\n    resolvers: resolver(data),\n});\n","import type { Handler } from 'express';\n\nexport const graphiqlHandler: Handler = (_, res) => {\n    res.writeHead(200, undefined, {\n        'Content-Type': 'text/html; charset=utf-8',\n    });\n    return res.end(\n        getGraphiqlHtml({\n            endpoint: '/graphql',\n        }),\n    );\n};\n\nconst getGraphiqlHtml = ({ endpoint }: { endpoint: string }) => `\n<!--\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n * Copy of https://github.com/graphql/graphiql/blob/main/examples/graphiql-cdn/index.html\n * https://github.com/graphql/graphiql\n * https://github.com/graphql/graphiql/blob/main/LICENSE\n-->\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <title>GraphiQL</title>\n    <style>\n      body {\n        height: 100%;\n        margin: 0;\n        width: 100%;\n        overflow: hidden;\n      }\n\n      #graphiql {\n        height: 100vh;\n      }\n    </style>\n    <script\n      crossorigin\n      src=\"https://cdn.jsdelivr.net/npm/react@18/umd/react.production.min.js\"\n    ></script>\n    <script\n      crossorigin\n      src=\"https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.production.min.js\"\n    ></script>\n    <!--\n      These two files can be found in the npm module, however you may wish to\n      copy them directly into your environment, or perhaps include them in your\n      favored resource bundler.\n     -->\n    <script\n      src=\"https://cdn.jsdelivr.net/npm/graphiql/graphiql.min.js\"\n      type=\"application/javascript\"\n    ></script>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/graphiql/graphiql.min.css\" />\n    <!-- \n      These are imports for the GraphIQL Explorer plugin.\n     -->\n    <script\n      src=\"https://cdn.jsdelivr.net/npm/@graphiql/plugin-explorer/dist/index.umd.js\"\n      crossorigin\n    ></script>\n\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/@graphiql/plugin-explorer/dist/style.css\"\n    />\n  </head>\n\n  <body>\n    <div id=\"graphiql\">Loading...</div>\n    <script>\n      const root = ReactDOM.createRoot(document.getElementById('graphiql'));\n      const fetcher = GraphiQL.createFetcher({\n        url: '${endpoint}',\n      });\n      const explorerPlugin = GraphiQLPluginExplorer.explorerPlugin();\n      root.render(\n        React.createElement(GraphiQL, {\n          fetcher,\n          defaultEditorToolsVisibility: true,\n          plugins: [explorerPlugin],\n        }),\n      );\n    </script>\n  </body>\n</html>`;\n","import { createHandler } from 'graphql-http/lib/use/express';\nimport schemaBuilder from './schemaBuilder';\nimport { graphiqlHandler } from './graphiqlHandler';\nimport type { Data } from './types';\nimport type { Handler } from 'express';\n\n/**\n * An express middleware for a GraphQL endpoint serving data from the supplied json.\n *\n * @param {any} data\n * @returns An array of middlewares\n *\n * @example\n * import express from 'express';\n * import jsonGraphqlExpress from 'json-graphql-server';\n *\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n *\n * const PORT = 3000;\n * var app = express();\n *\n * app.use('/graphql', jsonGraphqlExpress(data));\n *\n * app.listen(PORT);\n */\nexport default (data: Data) => {\n    const graphqlHandler = createHandler({\n        schema: schemaBuilder(data),\n    });\n\n    const expressMiddleware: Handler = (req, res, next) => {\n        if (req.is('application/json')) {\n            return graphqlHandler(req, res, next);\n        }\n\n        return graphiqlHandler(req, res, next);\n    };\n\n    return expressMiddleware;\n};\n","import jsonGraphqlExpress from './jsonGraphqlExpress';\nimport schemaBuilder, { getPlainSchema } from './schemaBuilder';\n\nexport const jsonSchemaBuilder = schemaBuilder;\nexport { getPlainSchema, jsonGraphqlExpress };\nexport default jsonGraphqlExpress;\n"],"names":["isObject","val","isExecutionResult","isAsyncIterable","isResponse","init","parseRequestParams","req","_a","_b","method","mediaType","charset","getHeader","partParams","search","searchParams","variables","extensions","data","body","createHandler","options","schema","context","validate","graphqlValidate","validationRules","execute","graphqlExecute","parse","graphqlParse","getOperationAST","graphqlGetOperationAST","rootValue","onSubscribe","onOperation","formatError","err","optionsParseRequestParams","acceptedMediaType","accepts","accept","params","param","paramsOrRes","makeResponse","args","maybeResErrsOrArgs","areGraphQLErrors","operationName","query","document","resOrContext","argsWithoutSchema","resOrSchema","rules","specifiedRules","validationErrs","operation","ast","GraphQLError","result","maybeResponseOrResult","resultOrErrors","isGraphQLError","jsonErrorReplacer","errors","key","obj","_key","handle","createRawHandler","res","toRequest","resolve","chunk","Kind","ISO_DATE_STRING_PATTERN","isISODateString","value","GraphQLDate","DateType","GraphQLScalarType","isNumeric","valuesAreNumeric","values","isInteger","valuesAreInteger","isBoolean","valuesAreBoolean","isString","valuesAreString","isArray","valuesAreArray","isDate","valuesAreDate","valuesAreObject","requiredTypeOrNormal","type","isRequired","GraphQLNonNull","getTypeFromValues","name","GraphQLID","leafValues","agg","arr","GraphQLList","GraphQLBoolean","GraphQLString","GraphQLInt","GraphQLFloat","GraphQLJSON","getValuesFromEntities","entities","entity","fieldName","getFieldsFromEntities","checkRequired","fieldValues","nbValues","fields","getRelationshipFromKey","camelize","getTypeFromKey","singularize","getRelatedKey","pluralize","getReverseRelatedField","getRelatedType","getTypesFromData","typeName","typeObject","GraphQLObjectType","getRangeFiltersFromEntities","fieldType","isListType","getFilterTypesFromData","types","GraphQLInputObjectType","isRelationshipField","getSchemaFromData","typesByName","filterTypesByName","listMetadataType","queryType","mutationType","typeFields","nullableTypeFields","f","id","createFields","inputFields","createManyInputType","GraphQLSchema","schemaExtension","ext","newExtension","relType","rel","extendSchema","applyFilters","entityData","filter","items","d","realKey","item","v","itemValue","all","_","sortField","sortOrder","page","perPage","direction","a","b","meta","single","create","newId","newEntity","createMany","e","update","updatedEntity","stringId","indexOfEntity","remove","removedEntity","entityResolver","entityName","manyToOneResolvers","resolvers","relatedRecord","relatedField","hasReverseRelationship","oneToManyResolvers","record","hasType","hasJSON","hasJSONField","field","getQueryResolvers","getMutationResolvers","resolver","schemaBuilder","makeExecutableSchema","printSchema","getPlainSchema","graphiqlHandler","getGraphiqlHtml","endpoint","jsonGraphqlExpress","graphqlHandler","next","jsonSchemaBuilder"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}