{"version":3,"file":"json-graphql-server-node.js","sources":["../node_modules/graphql-http/lib/utils.mjs","../node_modules/graphql-http/lib/handler.mjs","../node_modules/graphql-http/lib/use/express.mjs","../node_modules/graphql/language/kinds.mjs","../src/introspection/DateType.ts","../src/introspection/getTypeFromValues.ts","../src/introspection/getValuesFromEntities.ts","../src/introspection/getFieldsFromEntities.ts","../src/nameConverter.ts","../src/introspection/getTypesFromData.ts","../src/introspection/getFilterTypesFromData.ts","../src/relationships.ts","../src/introspection/getSchemaFromData.ts","../src/resolver/Query/applyFilters.ts","../src/resolver/Query/all.ts","../src/resolver/Query/meta.ts","../src/resolver/Query/single.ts","../src/resolver/Mutation/create.ts","../src/resolver/Mutation/createMany.ts","../src/resolver/Mutation/update.ts","../src/resolver/Mutation/remove.ts","../src/resolver/Entity/index.ts","../src/introspection/hasType.ts","../src/resolver/index.ts","../src/schemaBuilder.ts","../src/graphiqlHandler.ts","../src/jsonGraphqlExpress.ts","../src/node.ts"],"sourcesContent":["/**\n *\n * utils\n *\n */\n/** @private */\nexport function extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\n/** @private */\nexport function isObject(val) {\n    return typeof val === 'object' && val !== null;\n}\n/** @private */\nexport function isExecutionResult(val) {\n    return (isObject(val) &&\n        ('data' in val || ('data' in val && val.data == null && 'errors' in val)));\n}\n/** @private */\nexport function isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === 'function';\n}\n","/**\n *\n * handler\n *\n */\nimport { validate as graphqlValidate, specifiedRules, execute as graphqlExecute, parse as graphqlParse, getOperationAST as graphqlGetOperationAST, GraphQLError, } from 'graphql';\nimport { isAsyncIterable, isExecutionResult, isObject } from './utils.mjs';\n/** Checks whether the passed value is the `graphql-http` server agnostic response. */\nfunction isResponse(val) {\n    // Make sure the contents of body match string | null\n    if (!Array.isArray(val))\n        return false;\n    if (typeof val[0] !== 'string' && val[0] !== null)\n        return false;\n    if (!isObject(val[1]))\n        return false;\n    // Make sure the contents of init match ResponseInit\n    const init = val[1];\n    if (init.status && typeof init.status !== 'number')\n        return false;\n    if (init.statusText && typeof init.statusText !== 'string')\n        return false;\n    if (init.headers && !isObject(init.headers))\n        return false;\n    return true;\n}\n/**\n * The GraphQL over HTTP spec compliant request parser for an incoming GraphQL request.\n * It parses and validates the request itself, including the request method and the\n * content-type of the body.\n *\n * If the HTTP request itself is invalid or malformed, the function will return an\n * appropriate {@link Response}.\n *\n * If the HTTP request is valid, but is not a well-formatted GraphQL request, the\n * function will throw an error and it is up to the user to handle and respond as\n * they see fit.\n *\n * @category Server\n */\nexport async function parseRequestParams(req) {\n    var _a, _b;\n    const method = req.method;\n    if (method !== 'GET' && method !== 'POST') {\n        return [\n            null,\n            {\n                status: 405,\n                statusText: 'Method Not Allowed',\n                headers: {\n                    allow: 'GET, POST',\n                },\n            },\n        ];\n    }\n    const [mediaType, charset = 'charset=utf-8', // utf-8 is assumed when not specified. this parameter is either \"charset\" or \"boundary\" (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length)\n    ] = (getHeader(req, 'content-type') || '')\n        .replace(/\\s/g, '')\n        .toLowerCase()\n        .split(';');\n    const partParams = {};\n    switch (true) {\n        case method === 'GET': {\n            // TODO: what if content-type is specified and is not application/x-www-form-urlencoded?\n            try {\n                const [, search] = req.url.split('?');\n                const searchParams = new URLSearchParams(search);\n                partParams.operationName =\n                    (_a = searchParams.get('operationName')) !== null && _a !== void 0 ? _a : undefined;\n                partParams.query = (_b = searchParams.get('query')) !== null && _b !== void 0 ? _b : undefined;\n                const variables = searchParams.get('variables');\n                if (variables)\n                    partParams.variables = JSON.parse(variables);\n                const extensions = searchParams.get('extensions');\n                if (extensions)\n                    partParams.extensions = JSON.parse(extensions);\n            }\n            catch (_c) {\n                throw new Error('Unparsable URL');\n            }\n            break;\n        }\n        case method === 'POST' &&\n            mediaType === 'application/json' &&\n            charset === 'charset=utf-8':\n            {\n                if (!req.body) {\n                    throw new Error('Missing body');\n                }\n                let data;\n                try {\n                    const body = typeof req.body === 'function' ? await req.body() : req.body;\n                    data = typeof body === 'string' ? JSON.parse(body) : body;\n                }\n                catch (err) {\n                    throw new Error('Unparsable JSON body');\n                }\n                if (!isObject(data)) {\n                    throw new Error('JSON body must be an object');\n                }\n                partParams.operationName = data.operationName;\n                partParams.query = data.query;\n                partParams.variables = data.variables;\n                partParams.extensions = data.extensions;\n                break;\n            }\n        default: // graphql-http doesnt support any other content type\n            return [\n                null,\n                {\n                    status: 415,\n                    statusText: 'Unsupported Media Type',\n                },\n            ];\n    }\n    if (partParams.query == null)\n        throw new Error('Missing query');\n    if (typeof partParams.query !== 'string')\n        throw new Error('Invalid query');\n    if (partParams.variables != null &&\n        (typeof partParams.variables !== 'object' ||\n            Array.isArray(partParams.variables))) {\n        throw new Error('Invalid variables');\n    }\n    if (partParams.operationName != null &&\n        typeof partParams.operationName !== 'string') {\n        throw new Error('Invalid operationName');\n    }\n    if (partParams.extensions != null &&\n        (typeof partParams.extensions !== 'object' ||\n            Array.isArray(partParams.extensions))) {\n        throw new Error('Invalid extensions');\n    }\n    // request parameters are checked and now complete\n    return partParams;\n}\n/**\n * Makes a GraphQL over HTTP spec compliant server handler. The handler can\n * be used with your favorite server library.\n *\n * Beware that the handler resolves only after the whole operation completes.\n *\n * Errors thrown from **any** of the provided options or callbacks (or even due to\n * library misuse or potential bugs) will reject the handler's promise. They are\n * considered internal errors and you should take care of them accordingly.\n *\n * For production environments, its recommended not to transmit the exact internal\n * error details to the client, but instead report to an error logging tool or simply\n * the console.\n *\n * Simple example usage with Node:\n *\n * ```js\n * import http from 'http';\n * import { createHandler } from 'graphql-http';\n * import { schema } from './my-graphql-schema/index.mjs';\n *\n * // Create the GraphQL over HTTP handler\n * const handler = createHandler({ schema });\n *\n * // Create a HTTP server using the handler on `/graphql`\n * const server = http.createServer(async (req, res) => {\n *   if (!req.url.startsWith('/graphql')) {\n *     return res.writeHead(404).end();\n *   }\n *\n *   try {\n *     const [body, init] = await handler({\n *       url: req.url,\n *       method: req.method,\n *       headers: req.headers,\n *       body: () => new Promise((resolve) => {\n *         let body = '';\n *         req.on('data', (chunk) => (body += chunk));\n *         req.on('end', () => resolve(body));\n *       }),\n *       raw: req,\n *     });\n *     res.writeHead(init.status, init.statusText, init.headers).end(body);\n *   } catch (err) {\n *     // BEWARE not to transmit the exact internal error message in production environments\n *     res.writeHead(500).end(err.message);\n *   }\n * });\n *\n * server.listen(4000);\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server\n */\nexport function createHandler(options) {\n    const { schema, context, validate = graphqlValidate, validationRules = [], execute = graphqlExecute, parse = graphqlParse, getOperationAST = graphqlGetOperationAST, rootValue, onSubscribe, onOperation, formatError = (err) => err, parseRequestParams: optionsParseRequestParams = parseRequestParams, } = options;\n    return async function handler(req) {\n        let acceptedMediaType = null;\n        const accepts = (getHeader(req, 'accept') || '*/*')\n            .replace(/\\s/g, '')\n            .toLowerCase()\n            .split(',');\n        for (const accept of accepts) {\n            // accept-charset became obsolete, shouldnt be used (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset)\n            // TODO: handle the weight parameter \"q\"\n            const [mediaType, ...params] = accept.split(';');\n            const charset = (params === null || params === void 0 ? void 0 : params.find((param) => param.includes('charset='))) || 'charset=utf-8'; // utf-8 is assumed when not specified;\n            if (mediaType === 'application/graphql-response+json' &&\n                charset === 'charset=utf-8') {\n                acceptedMediaType = 'application/graphql-response+json';\n                break;\n            }\n            // application/json should be the default until watershed\n            if ((mediaType === 'application/json' ||\n                mediaType === 'application/*' ||\n                mediaType === '*/*') &&\n                (charset === 'charset=utf-8' || charset === 'charset=utf8')) {\n                acceptedMediaType = 'application/json';\n                break;\n            }\n        }\n        if (!acceptedMediaType) {\n            return [\n                null,\n                {\n                    status: 406,\n                    statusText: 'Not Acceptable',\n                    headers: {\n                        accept: 'application/graphql-response+json; charset=utf-8, application/json; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        let params;\n        try {\n            let paramsOrRes = await optionsParseRequestParams(req);\n            if (!paramsOrRes)\n                paramsOrRes = await parseRequestParams(req);\n            if (isResponse(paramsOrRes))\n                return paramsOrRes;\n            params = paramsOrRes;\n        }\n        catch (err) {\n            return makeResponse(err, acceptedMediaType, formatError);\n        }\n        let args;\n        const maybeResErrsOrArgs = await (onSubscribe === null || onSubscribe === void 0 ? void 0 : onSubscribe(req, params));\n        if (isResponse(maybeResErrsOrArgs))\n            return maybeResErrsOrArgs;\n        else if (isExecutionResult(maybeResErrsOrArgs) ||\n            areGraphQLErrors(maybeResErrsOrArgs))\n            return makeResponse(maybeResErrsOrArgs, acceptedMediaType, formatError);\n        else if (maybeResErrsOrArgs)\n            args = maybeResErrsOrArgs;\n        else {\n            if (!schema)\n                throw new Error('The GraphQL schema is not provided');\n            const { operationName, query, variables } = params;\n            let document;\n            try {\n                document = parse(query);\n            }\n            catch (err) {\n                return makeResponse(err, acceptedMediaType, formatError);\n            }\n            const resOrContext = typeof context === 'function' ? await context(req, params) : context;\n            if (isResponse(resOrContext))\n                return resOrContext;\n            const argsWithoutSchema = {\n                operationName,\n                document,\n                variableValues: variables,\n                contextValue: resOrContext,\n            };\n            if (typeof schema === 'function') {\n                const resOrSchema = await schema(req, argsWithoutSchema);\n                if (isResponse(resOrSchema))\n                    return resOrSchema;\n                args = Object.assign(Object.assign({}, argsWithoutSchema), { schema: resOrSchema });\n            }\n            else {\n                args = Object.assign(Object.assign({}, argsWithoutSchema), { schema });\n            }\n            let rules = specifiedRules;\n            if (typeof validationRules === 'function') {\n                rules = await validationRules(req, args, specifiedRules);\n            }\n            else {\n                rules = [...rules, ...validationRules];\n            }\n            const validationErrs = validate(args.schema, args.document, rules);\n            if (validationErrs.length) {\n                return makeResponse(validationErrs, acceptedMediaType, formatError);\n            }\n        }\n        let operation;\n        try {\n            const ast = getOperationAST(args.document, args.operationName);\n            if (!ast)\n                throw null;\n            operation = ast.operation;\n        }\n        catch (_a) {\n            return makeResponse(new GraphQLError('Unable to detect operation AST'), acceptedMediaType, formatError);\n        }\n        if (operation === 'subscription') {\n            return makeResponse(new GraphQLError('Subscriptions are not supported'), acceptedMediaType, formatError);\n        }\n        // mutations cannot happen over GETs\n        // https://graphql.github.io/graphql-over-http/draft/#sel-CALFJRPAAELBAAxwP\n        if (operation === 'mutation' && req.method === 'GET') {\n            return [\n                JSON.stringify({\n                    errors: [new GraphQLError('Cannot perform mutations over GET')],\n                }),\n                {\n                    status: 405,\n                    statusText: 'Method Not Allowed',\n                    headers: {\n                        allow: 'POST',\n                    },\n                },\n            ];\n        }\n        if (!('rootValue' in args)) {\n            args.rootValue = rootValue;\n        }\n        if (!('contextValue' in args)) {\n            const resOrContext = typeof context === 'function' ? await context(req, params) : context;\n            if (isResponse(resOrContext))\n                return resOrContext;\n            args.contextValue = resOrContext;\n        }\n        let result = await execute(args);\n        const maybeResponseOrResult = await (onOperation === null || onOperation === void 0 ? void 0 : onOperation(req, args, result));\n        if (isResponse(maybeResponseOrResult))\n            return maybeResponseOrResult;\n        else if (maybeResponseOrResult)\n            result = maybeResponseOrResult;\n        if (isAsyncIterable(result)) {\n            return makeResponse(new GraphQLError('Subscriptions are not supported'), acceptedMediaType, formatError);\n        }\n        return makeResponse(result, acceptedMediaType, formatError);\n    };\n}\n/**\n * Creates an appropriate GraphQL over HTTP response following the provided arguments.\n *\n * If the first argument is an `ExecutionResult`, the operation will be treated as \"successful\".\n *\n * If the first argument is (an array of) `GraphQLError`, or an `ExecutionResult` without the `data` field, it will be treated\n * the response will be constructed with the help of `acceptedMediaType` complying with the GraphQL over HTTP spec.\n *\n * If the first argument is an `Error`, the operation will be treated as a bad request responding with `400: Bad Request` and the\n * error will be present in the `ExecutionResult` style.\n */\nfunction makeResponse(resultOrErrors, acceptedMediaType, formatError) {\n    if (resultOrErrors instanceof Error &&\n        // because GraphQLError extends the Error class\n        !isGraphQLError(resultOrErrors)) {\n        return [\n            JSON.stringify({ errors: [formatError(resultOrErrors)] }, jsonErrorReplacer),\n            {\n                status: 400,\n                statusText: 'Bad Request',\n                headers: {\n                    'content-type': 'application/json; charset=utf-8',\n                },\n            },\n        ];\n    }\n    const errors = isGraphQLError(resultOrErrors)\n        ? [resultOrErrors]\n        : areGraphQLErrors(resultOrErrors)\n            ? resultOrErrors\n            : null;\n    if (errors) {\n        return [\n            JSON.stringify({ errors: errors.map(formatError) }, jsonErrorReplacer),\n            Object.assign(Object.assign({}, (acceptedMediaType === 'application/json'\n                ? {\n                    status: 200,\n                    statusText: 'OK',\n                }\n                : {\n                    status: 400,\n                    statusText: 'Bad Request',\n                })), { headers: {\n                    'content-type': acceptedMediaType === 'application/json'\n                        ? 'application/json; charset=utf-8'\n                        : 'application/graphql-response+json; charset=utf-8',\n                } }),\n        ];\n    }\n    return [\n        JSON.stringify('errors' in resultOrErrors && resultOrErrors.errors\n            ? Object.assign(Object.assign({}, resultOrErrors), { errors: resultOrErrors.errors.map(formatError) }) : resultOrErrors, jsonErrorReplacer),\n        {\n            status: 200,\n            statusText: 'OK',\n            headers: {\n                'content-type': acceptedMediaType === 'application/json'\n                    ? 'application/json; charset=utf-8'\n                    : 'application/graphql-response+json; charset=utf-8',\n            },\n        },\n    ];\n}\nfunction getHeader(req, key) {\n    if (typeof req.headers.get === 'function') {\n        return req.headers.get(key);\n    }\n    return Object(req.headers)[key];\n}\nfunction areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        obj.length > 0 &&\n        // if one item in the array is a GraphQLError, we're good\n        obj.some(isGraphQLError));\n}\nfunction isGraphQLError(obj) {\n    return obj instanceof GraphQLError;\n}\nfunction jsonErrorReplacer(_key, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nval) {\n    if (val instanceof Error &&\n        // GraphQL errors implement their own stringer\n        !isGraphQLError(val)) {\n        const error = val;\n        return {\n            // name: error.name, name is included in message\n            message: error.message,\n            // stack: error.stack, can leak sensitive details\n        };\n    }\n    return val;\n}\n","import { createHandler as createRawHandler, parseRequestParams as rawParseRequestParams, } from '../handler.mjs';\n/**\n * The GraphQL over HTTP spec compliant request parser for an incoming GraphQL request.\n *\n * If the HTTP request _is not_ a [well-formatted GraphQL over HTTP request](https://graphql.github.io/graphql-over-http/draft/#sec-Request), the function will respond\n * on the `Response` argument and return `null`.\n *\n * If the HTTP request _is_ a [well-formatted GraphQL over HTTP request](https://graphql.github.io/graphql-over-http/draft/#sec-Request), but is invalid or malformed,\n * the function will throw an error and it is up to the user to handle and respond as they see fit.\n *\n * ```js\n * import express from 'express'; // yarn add express\n * import { parseRequestParams } from 'graphql-http/lib/use/express';\n *\n * const app = express();\n * app.all('/graphql', async (req, res) => {\n *   try {\n *     const maybeParams = await parseRequestParams(req, res);\n *     if (!maybeParams) {\n *       // not a well-formatted GraphQL over HTTP request,\n *       // parser responded and there's nothing else to do\n *       return;\n *     }\n *\n *     // well-formatted GraphQL over HTTP request,\n *     // with valid parameters\n *     res.writeHead(200).end(JSON.stringify(maybeParams, null, '  '));\n *   } catch (err) {\n *     // well-formatted GraphQL over HTTP request,\n *     // but with invalid parameters\n *     res.writeHead(400).end(err.message);\n *   }\n * });\n *\n * app.listen({ port: 4000 });\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server/express\n */\nexport async function parseRequestParams(req, res) {\n    const rawReq = toRequest(req, res);\n    const paramsOrRes = await rawParseRequestParams(rawReq);\n    if (!('query' in paramsOrRes)) {\n        const [body, init] = paramsOrRes;\n        res.writeHead(init.status, init.statusText, init.headers).end(body);\n        return null;\n    }\n    return paramsOrRes;\n}\n/**\n * Create a GraphQL over HTTP spec compliant request handler for\n * the express framework.\n *\n * ```js\n * import express from 'express'; // yarn add express\n * import { createHandler } from 'graphql-http/lib/use/express';\n * import { schema } from './my-graphql-schema/index.mjs';\n *\n * const app = express();\n * app.all('/graphql', createHandler({ schema }));\n *\n * app.listen({ port: 4000 });\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server/express\n */\nexport function createHandler(options) {\n    const handle = createRawHandler(options);\n    return async function requestListener(req, res) {\n        try {\n            const [body, init] = await handle(toRequest(req, res));\n            res.writeHead(init.status, init.statusText, init.headers).end(body);\n        }\n        catch (err) {\n            // The handler shouldnt throw errors.\n            // If you wish to handle them differently, consider implementing your own request handler.\n            console.error('Internal error occurred during request handling. ' +\n                'Please check your implementation.', err);\n            res.writeHead(500).end();\n        }\n    };\n}\nfunction toRequest(req, res) {\n    return {\n        url: req.url,\n        method: req.method,\n        headers: req.headers,\n        body: () => {\n            if (req.body) {\n                // in case express has a body parser\n                return req.body;\n            }\n            return new Promise((resolve) => {\n                let body = '';\n                req.setEncoding('utf-8');\n                req.on('data', (chunk) => (body += chunk));\n                req.on('end', () => resolve(body));\n            });\n        },\n        raw: req,\n        context: { res },\n    };\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n","import { GraphQLScalarType, GraphQLError } from 'graphql';\nimport { Kind } from 'graphql/language';\n\nconst ISO_DATE_STRING_PATTERN = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/;\n\nexport const isISODateString = (value: any) => {\n    if (typeof value !== 'string') return false;\n    if (!ISO_DATE_STRING_PATTERN.test(value)) return false;\n    const d = new Date(value);\n    return d.toISOString() === value;\n};\n\nexport const GraphQLDate = 'Date';\n\nexport default new GraphQLScalarType({\n    name: GraphQLDate,\n    description: 'Date type',\n    parseValue(value: any) {\n        // value comes from the client\n        return new Date(value); // sent to resolvers\n    },\n    serialize(value: any) {\n        // value comes from resolvers\n        if (isISODateString(value)) return value;\n        return value.toISOString(); // sent to the client\n    },\n    parseLiteral(ast) {\n        // ast comes from parsing the query\n        // this is where you can validate and transform\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(\n                `Query error: Can only parse dates strings, got a: ${ast.kind}`,\n                {\n                    nodes: [ast],\n                },\n            );\n        }\n        if (Number.isNaN(Date.parse(ast.value))) {\n            throw new GraphQLError('Query error: not a valid date', {\n                nodes: [ast],\n            });\n        }\n        return new Date(ast.value);\n    },\n});\n","import {\n    GraphQLBoolean,\n    GraphQLFloat,\n    GraphQLID,\n    GraphQLInt,\n    GraphQLList,\n    GraphQLNonNull,\n    type GraphQLNullableType,\n    GraphQLString,\n} from 'graphql';\nimport { GraphQLJSON } from 'graphql-type-json';\nimport DateType, { isISODateString } from './DateType';\n\nconst isNumeric = (value: any) =>\n    !Number.isNaN(Number.parseFloat(value)) && Number.isFinite(value);\nconst valuesAreNumeric = (values: any[]) => values.every(isNumeric);\nconst isInteger = (value: any) => Number.isInteger(value);\nconst valuesAreInteger = (values: any[]) => values.every(isInteger);\nconst isBoolean = (value: any) => typeof value === 'boolean';\nconst valuesAreBoolean = (values: any[]) => values.every(isBoolean);\nconst isString = (value: any) => typeof value === 'string';\nconst valuesAreString = (values: any[]) => values.every(isString);\nconst isArray = (value: any) => Array.isArray(value);\nconst valuesAreArray = (values: any[]) => values.every(isArray);\nconst isDate = (value: any) => value instanceof Date || isISODateString(value);\nconst valuesAreDate = (values: any[]) => values.every(isDate);\nconst isObject = (value: any) =>\n    Object.prototype.toString.call(value) === '[object Object]';\nconst valuesAreObject = (values: any[]) => values.every(isObject);\n\nconst requiredTypeOrNormal = <GQLType extends GraphQLNullableType>(\n    type: GQLType,\n    isRequired: boolean,\n) => (isRequired ? new GraphQLNonNull(type) : type);\n\nexport default (name: string, values: any[] = [], isRequired = false) => {\n    if (name === 'id' || name.substr(name.length - 3) === '_id') {\n        return requiredTypeOrNormal(GraphQLID, isRequired);\n    }\n    if (values.length > 0) {\n        if (valuesAreArray(values)) {\n            const leafValues = values.reduce((agg, arr) => {\n                // biome-ignore lint/complexity/noForEach: <explanation>\n                arr.forEach((value: any) => agg.push(value));\n                return agg;\n            }, []);\n            if (valuesAreBoolean(leafValues)) {\n                return requiredTypeOrNormal(\n                    new GraphQLList(GraphQLBoolean),\n                    isRequired,\n                );\n            }\n            if (valuesAreString(leafValues)) {\n                return requiredTypeOrNormal(\n                    new GraphQLList(GraphQLString),\n                    isRequired,\n                );\n            }\n            if (valuesAreInteger(leafValues)) {\n                return requiredTypeOrNormal(\n                    new GraphQLList(GraphQLInt),\n                    isRequired,\n                );\n            }\n            if (valuesAreNumeric(leafValues)) {\n                return requiredTypeOrNormal(\n                    new GraphQLList(GraphQLFloat),\n                    isRequired,\n                );\n            }\n            if (valuesAreObject(leafValues)) {\n                return requiredTypeOrNormal(GraphQLJSON, isRequired);\n            }\n            return requiredTypeOrNormal(\n                new GraphQLList(GraphQLString),\n                isRequired,\n            ); // FIXME introspect further\n        }\n        if (valuesAreBoolean(values)) {\n            return requiredTypeOrNormal(GraphQLBoolean, isRequired);\n        }\n        if (valuesAreDate(values)) {\n            return requiredTypeOrNormal(DateType, isRequired);\n        }\n        if (valuesAreString(values)) {\n            return requiredTypeOrNormal(GraphQLString, isRequired);\n        }\n        if (valuesAreInteger(values)) {\n            return requiredTypeOrNormal(GraphQLInt, isRequired);\n        }\n        if (valuesAreNumeric(values)) {\n            return requiredTypeOrNormal(GraphQLFloat, isRequired);\n        }\n        if (valuesAreObject(values)) {\n            return requiredTypeOrNormal(GraphQLJSON, isRequired);\n        }\n    }\n    return requiredTypeOrNormal(GraphQLString, isRequired); // FIXME introspect further\n};\n","import type { Entity, EntityWithAllValues } from '../types';\n\n/**\n * Gets a list of values indexed by field based on a list of entities\n *\n * @example\n * const entities = [\n *     {\n *         id: 1,\n *         title: \"Lorem Ipsum\",\n *         views: 254,\n *         user_id: 123,\n *     },\n *     {\n *         id: 2,\n *         title: \"Sic Dolor amet\",\n *         views: 65,\n *         user_id: 456,\n *     },\n * ];\n * getValuesFromEntities(entities);\n * // {\n * //    id: [1, 2],\n * //    title: [\"Lorem Ipsum\", \"Sic Dolor amet\"],\n * //    views: [254, 65],\n * //    user_id: [123, 456],\n * // }\n */\nexport default (entities: Entity[]): EntityWithAllValues =>\n    entities.reduce((values, entity) => {\n        for (const fieldName of Object.keys(entity)) {\n            if (!values[fieldName]) {\n                values[fieldName] = [];\n            }\n            if (entity[fieldName] != null) {\n                values[fieldName].push(entity[fieldName]);\n            }\n        }\n        return values;\n    }, {});\n","import type { Entity } from '../types';\nimport getTypeFromValues from './getTypeFromValues';\nimport getValuesFromEntities from './getValuesFromEntities';\n\n/**\n * Get a list of GraphQL fields from a list of entities\n *\n * @example\n * const entities = [\n *     {\n *         \"id\": 1,\n *         \"title\": \"Lorem Ipsum\",\n *         \"views\": 254,\n *         \"user_id\": 123,\n *     },\n *     {\n *         \"id\": 2,\n *         \"title\": \"Sic Dolor amet\",\n *         \"user_id\": 456,\n *     },\n * ];\n * const types = getFieldsFromEntities(entities);\n * // {\n * //    id: { type: new GraphQLNonNull(GraphQLString) },\n * //    title: { type: new GraphQLNonNull(GraphQLString) },\n * //    views: { type: GraphQLInt },\n * //    user_id: { type: new GraphQLNonNull(GraphQLString) },\n * // };\n */\nexport default (entities: Entity[], checkRequired = true) => {\n    const fieldValues = getValuesFromEntities(entities);\n    const nbValues = entities.length;\n    return Object.keys(fieldValues).reduce(\n        (fields, fieldName) => {\n            fields[fieldName] = {\n                type: getTypeFromValues(\n                    fieldName,\n                    fieldValues[fieldName],\n                    checkRequired\n                        ? fieldValues[fieldName].length === nbValues\n                        : false,\n                ),\n            };\n            return fields;\n        },\n        {} as Record<string, any>,\n    );\n};\n","import { camelize, pluralize, singularize } from 'inflection';\n\n/**\n * A bit of vocabulary\n *\n * Consider this data:\n * {\n *     posts: [\n *          { id: 1, title: 'foo', user_id: 123 }\n *     ],\n *     users: [\n *          { id: 123, name: 'John Doe' }\n *     ]\n * }\n *\n * We'll use the following names:\n * - key: the keys in the data map, e.g. 'posts', 'users'\n * - type: for a key, the related type in the graphQL schema, e.g. 'posts' => 'Post', 'users' => 'User'\n * - field: the keys in a record, e.g. 'id', 'foo', user_id'\n * - relationship field: a key ending in '_id', e.g. 'user_id'\n * - related key: for a relationship field, the related key, e.g. 'user_id' => 'users'\n */\n\n/**\n *\n * @param {String} fieldName 'users'\n * @return {String} 'Users'\n */\nexport const getRelationshipFromKey = (key: string) => camelize(key);\n\n/**\n *\n * @param {String} fieldName 'users'\n * @return {String} 'User'\n */\nexport const getTypeFromKey = (key: string) => camelize(singularize(key));\n\n/**\n *\n * @param {String} fieldName 'user_id'\n * @return {String} 'users'\n */\nexport const getRelatedKey = (fieldName: string) =>\n    pluralize(fieldName.substr(0, fieldName.length - 3));\n\n/**\n *\n * @param {String} key 'users'\n * @return {String} 'user_id'\n */\nexport const getReverseRelatedField = (key: string) => `${singularize(key)}_id`;\n\n/**\n *\n * @param {String} fieldName 'user_id'\n * @return {String} 'User'\n */\nexport const getRelatedType = (fieldName: string) =>\n    getTypeFromKey(fieldName.substr(0, fieldName.length - 3));\n","import { GraphQLObjectType } from 'graphql';\nimport { singularize, camelize } from 'inflection';\n\nimport getFieldsFromEntities from './getFieldsFromEntities';\nimport { getTypeFromKey } from '../nameConverter';\nimport type { Data } from '../types';\n\n/**\n * Get a list of GraphQLObjectType from data\n *\n * @example\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n * const types = getTypesFromData(data);\n * // [\n * //     new GraphQLObjectType({\n * //         name: \"Posts\",\n * //         fields: {\n * //             id: { type: graphql.GraphQLString },\n * //             title: { type: graphql.GraphQLString },\n * //             views: { type: graphql.GraphQLInt },\n * //             user_id: { type: graphql.GraphQLString },\n * //         }\n * //     }),\n * //     new GraphQLObjectType({\n * //         name: \"Users\",\n * //         fields: {\n * //             id: { type: graphql.GraphQLString },\n * //             name: { type: graphql.GraphQLString },\n * //         }\n * //     }),\n * // ]\n */\nexport default (data: Data) =>\n    Object.keys(data)\n        .map((typeName) => ({\n            name: camelize(singularize(typeName)),\n            fields: getFieldsFromEntities(data[typeName]),\n        }))\n        .map((typeObject) => new GraphQLObjectType(typeObject));\n\nexport const getTypeNamesFromData = (data: Data) =>\n    Object.keys(data).map(getTypeFromKey);\n","import {\n    GraphQLBoolean,\n    GraphQLInputObjectType,\n    GraphQLString,\n    GraphQLInt,\n    GraphQLFloat,\n    GraphQLList,\n    GraphQLID,\n    isListType,\n} from 'graphql';\nimport getFieldsFromEntities from './getFieldsFromEntities';\nimport getValuesFromEntities from './getValuesFromEntities';\nimport getTypeFromValues from './getTypeFromValues';\nimport { getTypeFromKey } from '../nameConverter';\nimport { GraphQLDate } from './DateType';\nimport type { Data, Entity } from '../types';\n\nconst getRangeFiltersFromEntities = (entities: Entity[]) => {\n    const fieldValues = getValuesFromEntities(entities);\n    return Object.keys(fieldValues).reduce((fields, fieldName) => {\n        const fieldType = getTypeFromValues(\n            fieldName,\n            fieldValues[fieldName],\n            false\n        );\n\n        if (isListType(fieldType)) {\n            return fields;\n        }\n        if (\n            fieldType === GraphQLInt ||\n            fieldType === GraphQLFloat ||\n            fieldType === GraphQLString ||\n            fieldType.name === GraphQLDate\n        ) {\n            fields[`${fieldName}_lt`] = { type: fieldType };\n            fields[`${fieldName}_lte`] = { type: fieldType };\n            fields[`${fieldName}_gt`] = { type: fieldType };\n            fields[`${fieldName}_gte`] = { type: fieldType };\n        }\n\n        if (fieldType !== GraphQLBoolean) {\n            fields[`${fieldName}_neq`] = { type: fieldType };\n        }\n        return fields;\n    }, {} as Record<string, any>);\n};\n\n/**\n * Get a list of GraphQLObjectType for filtering data\n *\n * @example\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n * const types = getFilterTypesFromData(data);\n * // {\n * //     posts: new GraphQLInputObjectType({\n * //         name: \"PostFilter\",\n * //         fields: {\n * //             q: { type: GraphQLString },\n * //             id: { type: GraphQLString },\n * //             title: { type: GraphQLString },\n * //             views: { type: GraphQLInt },\n * //             views_lt: { type: GraphQLInt },\n * //             views_lte: { type: GraphQLInt },\n * //             views_gt: { type: GraphQLInt },\n * //             views_gte: { type: GraphQLInt },\n * //             user_id: { type: GraphQLString },\n * //         }\n * //     }),\n * //     users: new GraphQLObjectType({\n * //         name: \"UserFilter\",\n * //         fields: {\n * //             q: { type: GraphQLString },\n * //             id: { type: GraphQLString },\n * //             name: { type: GraphQLString },\n * //         }\n * //     }),\n * // }\n */\nexport default (data: Data) =>\n    Object.keys(data).reduce(\n        (types, key) =>\n            Object.assign({}, types, {\n                [getTypeFromKey(key)]: new GraphQLInputObjectType({\n                    name: `${getTypeFromKey(key)}Filter`,\n                    fields: Object.assign(\n                        {\n                            q: { type: GraphQLString },\n                        },\n                        {\n                            ids: { type: new GraphQLList(GraphQLID) },\n                        },\n                        getFieldsFromEntities(data[key], false),\n                        getRangeFiltersFromEntities(data[key]),\n                    ),\n                }),\n            }),\n        {} as Record<string, any>,\n    );\n","export const isRelationshipField = (fieldName: string) =>\n    fieldName.endsWith('_id');\n","import {\n    GraphQLID,\n    GraphQLInt,\n    GraphQLList,\n    GraphQLNonNull,\n    GraphQLObjectType,\n    GraphQLInputObjectType,\n    GraphQLSchema,\n    GraphQLString,\n    parse,\n    extendSchema,\n} from 'graphql';\nimport { pluralize, camelize } from 'inflection';\n\nimport getTypesFromData from './getTypesFromData';\nimport getFilterTypesFromData from './getFilterTypesFromData';\nimport { isRelationshipField } from '../relationships';\nimport { getRelatedType } from '../nameConverter';\nimport type { Data } from '../types';\n\n/**\n * Get a GraphQL schema from data\n *\n * @example\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n * const types = getTypesFromData(data);\n * // type Post {\n * //     id: ID\n * //     title: String\n * //     views: Int\n * //     user_id: ID\n * // }\n * //\n * // type User {\n * //     id: ID\n * //     name: String\n * // }\n * //\n * // type Query {\n * //     Post(id: ID!): Post\n * //     allPosts(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: PostFilter): [Post]\n * //     User(id: ID!): User\n * //     allUsers(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: UserFilter): [User]\n * // }\n * //\n * // type Mutation {\n * //     createPost(data: String): Post\n * //     updatePost(data: String): Post\n * //     removePost(id: ID!): Boolean\n * //     deletePost(id: ID!): Boolean\n * //     createUser(data: String): User\n * //     updateUser(data: String): User\n * //     removeUser(id: ID!): Boolean\n * //     deleteUser(id: ID!): Boolean\n * // }\n */\nexport default (data: Data) => {\n    const types = getTypesFromData(data);\n    const typesByName = types.reduce(\n        (types, type) => {\n            types[type.name] = type;\n            return types;\n        },\n        {} as Record<string, GraphQLObjectType>,\n    );\n\n    const filterTypesByName = getFilterTypesFromData(data);\n\n    const listMetadataType = new GraphQLObjectType({\n        name: 'ListMetadata',\n        fields: {\n            count: { type: GraphQLInt },\n        },\n    });\n\n    const queryType = new GraphQLObjectType({\n        name: 'Query',\n        fields: types.reduce(\n            (fields, type) => {\n                fields[type.name] = {\n                    type: typesByName[type.name],\n                    args: {\n                        id: { type: new GraphQLNonNull(GraphQLID) },\n                    },\n                };\n                fields[`all${camelize(pluralize(type.name))}`] = {\n                    type: new GraphQLList(typesByName[type.name]),\n                    args: {\n                        page: { type: GraphQLInt },\n                        perPage: { type: GraphQLInt },\n                        sortField: { type: GraphQLString },\n                        sortOrder: { type: GraphQLString },\n                        filter: { type: filterTypesByName[type.name] },\n                    },\n                };\n                fields[`_all${camelize(pluralize(type.name))}Meta`] = {\n                    type: listMetadataType,\n                    args: {\n                        page: { type: GraphQLInt },\n                        perPage: { type: GraphQLInt },\n                        filter: { type: filterTypesByName[type.name] },\n                    },\n                };\n                return fields;\n            },\n            {} as Record<string, any>,\n        ),\n    });\n\n    const mutationType = new GraphQLObjectType({\n        name: 'Mutation',\n        fields: types.reduce(\n            (fields, type) => {\n                const typeFields = typesByName[type.name].getFields();\n                const nullableTypeFields = Object.keys(typeFields).reduce(\n                    (f, fieldName) => {\n                        f[fieldName] = Object.assign(\n                            {},\n                            typeFields[fieldName],\n                            {\n                                type:\n                                    fieldName !== 'id' &&\n                                    typeFields[fieldName].type instanceof\n                                        GraphQLNonNull\n                                        ? typeFields[fieldName].type.ofType\n                                        : typeFields[fieldName].type,\n                            },\n                        );\n                        return f;\n                    },\n                    {} as Record<string, any>,\n                );\n                const { id, ...createFields } = typeFields;\n\n                // Build input type.\n                const inputFields = Object.keys(createFields).reduce(\n                    (f, fieldName) => {\n                        f[fieldName] = Object.assign(\n                            {},\n                            createFields[fieldName],\n                        );\n                        // biome-ignore lint/performance/noDelete: <explanation>\n                        delete f[fieldName].resolve;\n                        return f;\n                    },\n                    {} as Record<string, any>,\n                );\n\n                const createManyInputType = new GraphQLInputObjectType({\n                    name: `${type.name}Input`,\n                    fields: inputFields,\n                });\n\n                fields[`create${type.name}`] = {\n                    type: typesByName[type.name],\n                    args: createFields,\n                };\n                fields[`createMany${type.name}`] = {\n                    type: new GraphQLList(typesByName[type.name]),\n                    args: {\n                        data: {\n                            type: new GraphQLList(createManyInputType),\n                        },\n                    },\n                };\n                fields[`update${type.name}`] = {\n                    type: typesByName[type.name],\n                    args: nullableTypeFields,\n                };\n                fields[`remove${type.name}`] = {\n                    type: typesByName[type.name],\n                    args: {\n                        id: { type: new GraphQLNonNull(GraphQLID) },\n                    },\n                };\n                fields[`delete${type.name}`] = {\n                    type: typesByName[type.name],\n                    args: {\n                        id: { type: new GraphQLNonNull(GraphQLID) },\n                    },\n                };\n                return fields;\n            },\n            {} as Record<string, any>,\n        ),\n    });\n\n    const schema = new GraphQLSchema({\n        query: queryType,\n        mutation: mutationType,\n    });\n\n    /**\n     * extend schema to add relationship fields\n     *\n     * @example\n     * If the `post` key contains a 'user_id' field, then\n     * add one-to-many and many-to-one type extensions:\n     *     extend type Post { User: User }\n     *     extend type User { Posts: [Post] }\n     */\n\n    const schemaExtension = Object.values(typesByName).reduce((ext, type) => {\n        let newExtension = `${ext}`;\n        for (const fieldName of Object.keys(type.getFields()).filter(\n            isRelationshipField,\n        )) {\n            const relType = getRelatedType(fieldName);\n            const rel = pluralize(type.toString());\n            newExtension = `${newExtension}\n    extend type ${type} { ${relType}: ${relType} }\n    extend type ${relType} { ${rel}: [${type}] }`;\n        }\n        return newExtension;\n    }, '');\n\n    return schemaExtension\n        ? extendSchema(schema, parse(schemaExtension))\n        : schema;\n};\n","import type { Entity } from '../../types';\n\nexport default (\n    entityData: Entity[] = [],\n    filter: Record<string, any> = {},\n) => {\n    let items = [...entityData];\n\n    if (filter.ids) {\n        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n        items = items.filter((d) => filter.ids.some((id: any) => id == d.id));\n    } else {\n        // biome-ignore lint/complexity/noForEach: <explanation>\n        Object.keys(filter)\n            .filter((key) => key !== 'q')\n            .forEach((key) => {\n                if (key.indexOf('_neq') !== -1) {\n                    // not equal to\n                    const realKey = key.replace(/(_neq)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                            return d[realKey] != filter[key].toISOString();\n                        }\n                        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                        return d[realKey] != filter[key];\n                    });\n                    return;\n                }\n                if (key.indexOf('_lte') !== -1) {\n                    // less than or equal\n                    const realKey = key.replace(/(_lte)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            return d[realKey] <= filter[key].toISOString();\n                        }\n                        return d[realKey] <= filter[key];\n                    });\n                    return;\n                }\n                if (key.indexOf('_gte') !== -1) {\n                    // less than or equal\n                    const realKey = key.replace(/(_gte)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            return d[realKey] >= filter[key].toISOString();\n                        }\n                        return d[realKey] >= filter[key];\n                    });\n                    return;\n                }\n                if (key.indexOf('_lt') !== -1) {\n                    // less than or equal\n                    const realKey = key.replace(/(_lt)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            return d[realKey] < filter[key].toISOString();\n                        }\n                        return d[realKey] < filter[key];\n                    });\n                    return;\n                }\n                if (key.indexOf('_gt') !== -1) {\n                    // less than or equal\n                    const realKey = key.replace(/(_gt)$/, '');\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[realKey] === 'string'\n                        ) {\n                            return d[realKey] > filter[key].toISOString();\n                        }\n                        return d[realKey] > filter[key];\n                    });\n                    return;\n                }\n\n                if (Array.isArray(filter[key])) {\n                    items = items.filter((item) => {\n                        if (Array.isArray(item[key])) {\n                            // array filter and array item value: where all items in values\n                            return filter[key].every((v: any) =>\n                                item[key].some((itemValue: any) => {\n                                    if (\n                                        v instanceof Date &&\n                                        typeof itemValue === 'string'\n                                    ) {\n                                        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                                        return itemValue == v.toISOString();\n                                    }\n                                    // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                                    return itemValue == v;\n                                }),\n                            );\n                        }\n                        // where item in values\n                        return (\n                            filter[key].filter((v: any) => {\n                                if (\n                                    v instanceof Date &&\n                                    typeof item[key] === 'string'\n                                ) {\n                                    // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                                    return item[key] == v.toISOString();\n                                }\n                                // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                                return v == item[key];\n                            }).length > 0\n                        );\n                    });\n                } else {\n                    items = items.filter((d) => {\n                        if (\n                            filter[key] instanceof Date &&\n                            typeof d[key] === 'string'\n                        ) {\n                            // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                            return d[key] == filter[key].toISOString();\n                        }\n                        return filter[key] instanceof Date\n                            ? // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                              +d[key] == +filter[key]\n                            : // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                              d[key] == filter[key];\n                    });\n                }\n            });\n\n        if (filter.q) {\n            items = items.filter((d) =>\n                Object.keys(d).some((key) =>\n                    d[key]\n                        ?.toString()\n                        .toLowerCase()\n                        .includes(filter.q.toLowerCase()),\n                ),\n            );\n        }\n    }\n\n    return items;\n};\n","import type { Entity } from '../../types';\nimport applyFilters from './applyFilters';\n\nexport default (entityData: Entity[] = []) =>\n    (\n        _: any,\n        {\n            sortField,\n            sortOrder = 'asc',\n            page,\n            perPage = 25,\n            filter = {},\n        }: {\n            sortField?: string;\n            sortOrder?: string;\n            page?: number;\n            perPage?: number;\n            filter?: Record<string, any>;\n        },\n    ) => {\n        let items = [...entityData];\n\n        if (sortField) {\n            // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n            const direction = sortOrder.toLowerCase() == 'asc' ? 1 : -1;\n            items = items.sort((a, b) => {\n                if (a[sortField] > b[sortField]) {\n                    return direction;\n                }\n                if (a[sortField] < b[sortField]) {\n                    return -1 * direction;\n                }\n                return 0;\n            });\n        }\n\n        items = applyFilters(items, filter);\n\n        if (page !== undefined && perPage) {\n            items = items.slice(page * perPage, page * perPage + perPage);\n        }\n\n        return items;\n    };\n","import type { Entity } from '../../types';\nimport applyFilters from './applyFilters';\n\nexport default (entityData: Entity[]) =>\n    (_: any, { filter = {} }: { filter: Record<string, any> }) => {\n        const items = applyFilters(entityData, filter);\n\n        return { count: items.length };\n    };\n","import type { Entity } from '../../types';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, { id }: { id?: any }) =>\n        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n        entityData.find((d) => d.id == id);\n","import type { Entity } from '../../types';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, entity: Entity) => {\n        const newId =\n            entityData.length > 0\n                ? entityData[entityData.length - 1].id + 1\n                : 0;\n        const newEntity = Object.assign({}, entity, { id: entity.id ?? newId });\n        entityData.push(newEntity);\n        return newEntity;\n    };\n","import type { Entity } from '../../types';\nimport create from './create';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, entities: { data: Entity[] }) => {\n        return entities.data.map((e) => create(entityData)(null, e));\n    };\n","import type { Entity } from '../../types';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, params: Entity) => {\n        let updatedEntity = undefined;\n        if (params.id != null) {\n            const stringId = params.id.toString();\n            const indexOfEntity = entityData.findIndex(\n                (e) => e.id != null && e.id.toString() === stringId,\n            );\n            if (indexOfEntity !== -1) {\n                entityData[indexOfEntity] = Object.assign(\n                    {},\n                    entityData[indexOfEntity],\n                    params,\n                );\n                updatedEntity = entityData[indexOfEntity];\n            }\n        }\n        return updatedEntity;\n    };\n","import type { Entity } from '../../types';\n\nexport default (entityData: Entity[] = []) =>\n    (_: any, { id }: { id?: any }) => {\n        let removedEntity = undefined;\n        if (id != null) {\n            const stringId = id.toString();\n            const indexOfEntity = entityData.findIndex(\n                (e) => e.id != null && e.id.toString() === stringId,\n            );\n\n            if (indexOfEntity !== -1) {\n                removedEntity = entityData.splice(indexOfEntity, 1)[0];\n            }\n        }\n        return removedEntity;\n    };\n","import getFieldsFromEntities from '../../introspection/getFieldsFromEntities';\nimport {\n    getRelatedKey,\n    getRelatedType,\n    getRelationshipFromKey,\n    getReverseRelatedField,\n} from '../../nameConverter';\nimport { isRelationshipField } from '../../relationships';\nimport type { Data, Entity } from '../../types';\n\n/**\n * Add resolvers for relationship fields\n *\n * @example\n * Consider this data:\n *\n *     {\n *         posts: [\n *              { id: 1, title: 'Hello, world', user_id: 123 }\n *         ],\n *         users: [\n *              { id: 123, name: 'John Doe' }\n *         ]\n *         comments: [\n *              { id: 4646, post_id: 1, body: 'Nice post!' }\n *         ]\n *     }\n *\n * There are two relationship fields here, posts.user_id and comments.post_id.\n * The generated GraphQL schema for posts is:\n *\n *     type Post {\n *         id: ID!\n *         title: String\n *         user_id: ID\n *         User: User\n *         Comments: [Comment]\n *     }\n *\n * When called for the posts entity, this method generates resolvers\n * for Post.User and Post.Comments\n *\n * @param {String} entityName The entity key in the data map, e.g. \"posts\"\n * @param {Object} data The entire data map, e.g. { posts: [], users: [] }\n *\n * @return {Object} resolvers, e.g.\n *\n *     {\n *         Post: {\n *             User: (post) => users.find(user => user.id == post.user_id),\n *             Comments: (post) => comments.filter(comment => comment.post_id = post.id),\n *         },\n *     }\n */\nexport default (entityName: string, data: Data): Record<string, any> => {\n    const entityFields = Object.keys(getFieldsFromEntities(data[entityName]));\n    const manyToOneResolvers = entityFields.filter(isRelationshipField).reduce(\n        (resolvers, fieldName) =>\n            Object.assign({}, resolvers, {\n                [getRelatedType(fieldName)]: (entity: Entity) =>\n                    data[getRelatedKey(fieldName)].find(\n                        (relatedRecord) =>\n                            // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                            relatedRecord.id == entity[fieldName],\n                    ),\n            }),\n        {},\n    );\n    const relatedField = getReverseRelatedField(entityName); // 'posts' => 'post_id'\n\n    const hasReverseRelationship = (entityName: string) =>\n        Object.keys(getFieldsFromEntities(data[entityName])).includes(\n            relatedField,\n        );\n\n    const entities = Object.keys(data);\n    const oneToManyResolvers = entities.filter(hasReverseRelationship).reduce(\n        (resolvers, entityName) =>\n            Object.assign({}, resolvers, {\n                [getRelationshipFromKey(entityName)]: (entity: Entity) =>\n                    data[entityName].filter(\n                        // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                        (record) => record[relatedField] == entity.id,\n                    ),\n            }),\n        {},\n    );\n\n    return Object.assign({}, manyToOneResolvers, oneToManyResolvers);\n};\n","import type { GraphQLObjectType } from 'graphql';\nimport type { Data } from '../types';\nimport getFilterTypesFromData from './getFilterTypesFromData';\n\nexport default (name: string, data: Data) =>\n    Object.values(getFilterTypesFromData(data)).reduce(\n        (hasJSON, type: GraphQLObjectType) => {\n            if (hasJSON) return true;\n            return Object.values(type.getFields()).reduce(\n                (hasJSONField, field: any) => {\n                    if (hasJSONField) return true;\n                    // biome-ignore lint/suspicious/noDoubleEquals: <explanation>\n                    return field.type.name == name;\n                },\n                false,\n            );\n        },\n        false,\n    );\n","import { pluralize } from 'inflection';\nimport { GraphQLJSON } from 'graphql-type-json';\n\nimport all from './Query/all';\nimport meta from './Query/meta';\nimport single from './Query/single';\nimport create from './Mutation/create';\nimport createMany from './Mutation/createMany';\nimport update from './Mutation/update';\nimport remove from './Mutation/remove';\nimport entityResolver from './Entity';\nimport { getTypeFromKey } from '../nameConverter';\nimport DateType, { GraphQLDate } from '../introspection/DateType';\nimport hasType from '../introspection/hasType';\nimport type { Data, Entity } from '../types';\n\nconst getQueryResolvers = (entityName: string, data: Entity[]) => ({\n    [`all${pluralize(entityName)}`]: all(data),\n    [`_all${pluralize(entityName)}Meta`]: meta(data),\n    [entityName]: single(data),\n});\n\nconst getMutationResolvers = (entityName: string, data: Entity[]) => ({\n    [`create${entityName}`]: create(data),\n    [`createMany${entityName}`]: createMany(data),\n    [`update${entityName}`]: update(data),\n    [`remove${entityName}`]: remove(data),\n    [`delete${entityName}`]: remove(data),\n});\n\nexport default (data: Data) => {\n    return Object.assign(\n        {},\n        {\n            Query: Object.keys(data).reduce(\n                (resolvers, key) =>\n                    Object.assign(\n                        {},\n                        resolvers,\n                        getQueryResolvers(getTypeFromKey(key), data[key]),\n                    ),\n                {},\n            ),\n            Mutation: Object.keys(data).reduce(\n                (resolvers, key) =>\n                    Object.assign(\n                        {},\n                        resolvers,\n                        getMutationResolvers(getTypeFromKey(key), data[key]),\n                    ),\n                {},\n            ),\n        },\n        Object.keys(data).reduce(\n            (resolvers, key) =>\n                Object.assign({}, resolvers, {\n                    [getTypeFromKey(key)]: entityResolver(key, data),\n                }),\n            {},\n        ),\n        hasType(GraphQLDate, data) ? { Date: DateType } : {}, // required because makeExecutableSchema strips resolvers from typeDefs\n        hasType('JSON', data) ? { JSON: GraphQLJSON } : {}, // required because makeExecutableSchema strips resolvers from typeDefs\n    );\n};\n","import { makeExecutableSchema } from '@graphql-tools/schema';\nimport { printSchema } from 'graphql';\nimport getSchemaFromData from './introspection/getSchemaFromData';\nimport resolver from './resolver';\nimport type { Data } from './types';\n\n/**\n * Generates a GraphQL Schema object for your data\n *\n * @param {any} data\n * @returns A GraphQL Schema\n *\n * @example\n * import {graphql} from 'graphql';\n * import {jsonSchemaBuilder} from 'json-graphql-server';\n *\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n *\n * const schema = jsonSchemaBuilder(data);\n * const query = `[...]`\n * graphql(schema, query).then(result => {\n *   console.log(result);\n * });\n *\n */\nexport default (data: Data) =>\n    makeExecutableSchema({\n        typeDefs: printSchema(getSchemaFromData(data)),\n        resolvers: resolver(data),\n    });\n\n// Same as above, simply returning the object before making it executable.\n// This lets you use it with a custom apollo server or etc.\nexport const getPlainSchema = (data: Data) => ({\n    typeDefs: printSchema(getSchemaFromData(data)),\n    resolvers: resolver(data),\n});\n","import type { Handler } from 'express';\n\nexport const graphiqlHandler: Handler = (_, res) => {\n    res.writeHead(200, undefined, {\n        'Content-Type': 'text/html; charset=utf-8',\n    });\n    return res.end(\n        getGraphiqlHtml({\n            endpoint: '/graphql',\n        }),\n    );\n};\n\nconst getGraphiqlHtml = ({ endpoint }: { endpoint: string }) => `\n<!--\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n * Copy of https://github.com/graphql/graphiql/blob/main/examples/graphiql-cdn/index.html\n * https://github.com/graphql/graphiql\n * https://github.com/graphql/graphiql/blob/main/LICENSE\n-->\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <title>GraphiQL</title>\n    <style>\n      body {\n        height: 100%;\n        margin: 0;\n        width: 100%;\n        overflow: hidden;\n      }\n\n      #graphiql {\n        height: 100vh;\n      }\n    </style>\n    <script\n      crossorigin\n      src=\"https://cdn.jsdelivr.net/npm/react@18/umd/react.production.min.js\"\n    ></script>\n    <script\n      crossorigin\n      src=\"https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.production.min.js\"\n    ></script>\n    <!--\n      These two files can be found in the npm module, however you may wish to\n      copy them directly into your environment, or perhaps include them in your\n      favored resource bundler.\n     -->\n    <script\n      src=\"https://cdn.jsdelivr.net/npm/graphiql/graphiql.min.js\"\n      type=\"application/javascript\"\n    ></script>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/graphiql/graphiql.min.css\" />\n    <!-- \n      These are imports for the GraphIQL Explorer plugin.\n     -->\n    <script\n      src=\"https://cdn.jsdelivr.net/npm/@graphiql/plugin-explorer/dist/index.umd.js\"\n      crossorigin\n    ></script>\n\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/@graphiql/plugin-explorer/dist/style.css\"\n    />\n  </head>\n\n  <body>\n    <div id=\"graphiql\">Loading...</div>\n    <script>\n      const root = ReactDOM.createRoot(document.getElementById('graphiql'));\n      const fetcher = GraphiQL.createFetcher({\n        url: '${endpoint}',\n      });\n      const explorerPlugin = GraphiQLPluginExplorer.explorerPlugin();\n      root.render(\n        React.createElement(GraphiQL, {\n          fetcher,\n          defaultEditorToolsVisibility: true,\n          plugins: [explorerPlugin],\n        }),\n      );\n    </script>\n  </body>\n</html>`;\n","import { createHandler } from 'graphql-http/lib/use/express';\nimport schemaBuilder from './schemaBuilder';\nimport { graphiqlHandler } from './graphiqlHandler';\nimport type { Data } from './types';\nimport type { Handler } from 'express';\n\n/**\n * An express middleware for a GraphQL endpoint serving data from the supplied json.\n *\n * @param {any} data\n * @returns An array of middlewares\n *\n * @example\n * import express from 'express';\n * import jsonGraphqlExpress from 'json-graphql-server';\n *\n * const data = {\n *    \"posts\": [\n *        {\n *            \"id\": 1,\n *            \"title\": \"Lorem Ipsum\",\n *            \"views\": 254,\n *            \"user_id\": 123,\n *        },\n *        {\n *            \"id\": 2,\n *            \"title\": \"Sic Dolor amet\",\n *            \"views\": 65,\n *            \"user_id\": 456,\n *        },\n *    ],\n *    \"users\": [\n *        {\n *            \"id\": 123,\n *            \"name\": \"John Doe\"\n *        },\n *        {\n *            \"id\": 456,\n *            \"name\": \"Jane Doe\"\n *        }\n *    ],\n * };\n *\n * const PORT = 3000;\n * var app = express();\n *\n * app.use('/graphql', jsonGraphqlExpress(data));\n *\n * app.listen(PORT);\n */\nexport default (data: Data) => {\n    const graphqlHandler = createHandler({\n        schema: schemaBuilder(data),\n    });\n\n    const expressMiddleware: Handler = (req, res, next) => {\n        if (req.is('application/json')) {\n            return graphqlHandler(req, res, next);\n        }\n\n        return graphiqlHandler(req, res, next);\n    };\n\n    return expressMiddleware;\n};\n","import jsonGraphqlExpress from './jsonGraphqlExpress';\nimport schemaBuilder, { getPlainSchema } from './schemaBuilder';\n\nexport const jsonSchemaBuilder = schemaBuilder;\nexport { getPlainSchema, jsonGraphqlExpress };\nexport default jsonGraphqlExpress;\n"],"names":["isObject","val","isExecutionResult","isAsyncIterable","isResponse","init","parseRequestParams","req","_a","_b","method","mediaType","charset","getHeader","partParams","search","searchParams","variables","extensions","data","body","createHandler","options","schema","context","validate","graphqlValidate","validationRules","execute","graphqlExecute","parse","graphqlParse","getOperationAST","graphqlGetOperationAST","rootValue","onSubscribe","onOperation","formatError","err","optionsParseRequestParams","acceptedMediaType","accepts","accept","params","param","paramsOrRes","makeResponse","args","maybeResErrsOrArgs","areGraphQLErrors","operationName","query","document","resOrContext","argsWithoutSchema","resOrSchema","rules","specifiedRules","validationErrs","operation","ast","GraphQLError","result","maybeResponseOrResult","resultOrErrors","isGraphQLError","jsonErrorReplacer","errors","key","obj","_key","handle","createRawHandler","res","toRequest","resolve","chunk","Kind","ISO_DATE_STRING_PATTERN","isISODateString","value","GraphQLDate","DateType","GraphQLScalarType","isNumeric","valuesAreNumeric","values","isInteger","valuesAreInteger","isBoolean","valuesAreBoolean","isString","valuesAreString","isArray","valuesAreArray","isDate","valuesAreDate","valuesAreObject","requiredTypeOrNormal","type","isRequired","GraphQLNonNull","getTypeFromValues","name","GraphQLID","leafValues","agg","arr","GraphQLList","GraphQLBoolean","GraphQLString","GraphQLInt","GraphQLFloat","GraphQLJSON","getValuesFromEntities","entities","entity","fieldName","getFieldsFromEntities","checkRequired","fieldValues","nbValues","fields","getRelationshipFromKey","camelize","getTypeFromKey","singularize","getRelatedKey","pluralize","getReverseRelatedField","getRelatedType","getTypesFromData","typeName","typeObject","GraphQLObjectType","getRangeFiltersFromEntities","fieldType","isListType","getFilterTypesFromData","types","GraphQLInputObjectType","isRelationshipField","getSchemaFromData","typesByName","filterTypesByName","listMetadataType","queryType","mutationType","typeFields","nullableTypeFields","f","id","createFields","inputFields","createManyInputType","GraphQLSchema","schemaExtension","ext","newExtension","relType","rel","extendSchema","applyFilters","entityData","filter","items","d","realKey","item","v","itemValue","all","_","sortField","sortOrder","page","perPage","direction","a","b","meta","single","create","newId","newEntity","createMany","e","update","updatedEntity","stringId","indexOfEntity","remove","removedEntity","entityResolver","entityName","manyToOneResolvers","resolvers","relatedRecord","relatedField","hasReverseRelationship","oneToManyResolvers","record","hasType","hasJSON","hasJSONField","field","getQueryResolvers","getMutationResolvers","resolver","schemaBuilder","makeExecutableSchema","printSchema","getPlainSchema","graphiqlHandler","getGraphiqlHtml","endpoint","jsonGraphqlExpress","graphqlHandler","next","jsonSchemaBuilder"],"mappings":";;;;AAgBO,SAASA,EAASC,GAAK;AAC1B,SAAO,OAAOA,KAAQ,YAAYA,MAAQ;AAC9C;AAEO,SAASC,GAAkBD,GAAK;AACnC,SAAQD,EAASC,CAAG,MACf,UAAUA,KAAQ,UAAUA,KAAOA,EAAI,QAAQ,QAAQ,YAAYA;AAC5E;AAEO,SAASE,GAAgBF,GAAK;AACjC,SAAO,OAAO,OAAOA,CAAG,EAAE,OAAO,aAAa,KAAM;AACxD;ACnBA,SAASG,EAAWH,GAAK;AAMrB,MAJI,CAAC,MAAM,QAAQA,CAAG,KAElB,OAAOA,EAAI,CAAC,KAAM,YAAYA,EAAI,CAAC,MAAM,QAEzC,CAACD,EAASC,EAAI,CAAC,CAAC;AAChB,WAAO;AAEX,QAAMI,IAAOJ,EAAI,CAAC;AAKlB,SAJI,EAAAI,EAAK,UAAU,OAAOA,EAAK,UAAW,YAEtCA,EAAK,cAAc,OAAOA,EAAK,cAAe,YAE9CA,EAAK,WAAW,CAACL,EAASK,EAAK,OAAO;AAG9C;AAeO,eAAeC,GAAmBC,GAAK;AAC1C,MAAIC,GAAIC;AACR,QAAMC,IAASH,EAAI;AACnB,MAAIG,MAAW,SAASA,MAAW;AAC/B,WAAO;AAAA,MACH;AAAA,MACA;AAAA,QACI,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,SAAS;AAAA,UACL,OAAO;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAEL,QAAM;AAAA,IAACC;AAAA,IAAWC,IAAU;AAAA;AAAA,EAC3B,KAAIC,GAAUN,GAAK,cAAc,KAAK,IAClC,QAAQ,OAAO,EAAE,EACjB,YAAW,EACX,MAAM,GAAG,GACRO,IAAa,CAAE;AACrB,UAAQ,IAAI;AAAA,IACR,KAAKJ,MAAW,OAAO;AAEnB,UAAI;AACA,cAAM,CAAA,EAAGK,CAAM,IAAIR,EAAI,IAAI,MAAM,GAAG,GAC9BS,IAAe,IAAI,gBAAgBD,CAAM;AAC/C,QAAAD,EAAW,iBACNN,IAAKQ,EAAa,IAAI,eAAe,OAAO,QAAQR,MAAO,SAASA,IAAK,QAC9EM,EAAW,SAASL,IAAKO,EAAa,IAAI,OAAO,OAAO,QAAQP,MAAO,SAASA,IAAK;AACrF,cAAMQ,IAAYD,EAAa,IAAI,WAAW;AAC9C,QAAIC,MACAH,EAAW,YAAY,KAAK,MAAMG,CAAS;AAC/C,cAAMC,IAAaF,EAAa,IAAI,YAAY;AAChD,QAAIE,MACAJ,EAAW,aAAa,KAAK,MAAMI,CAAU;AAAA,MACjE,QACuB;AACP,cAAM,IAAI,MAAM,gBAAgB;AAAA,MAChD;AACY;AAAA,IACZ;AAAA,IACQ,MAAKR,MAAW,UACZC,MAAc,sBACdC,MAAY,kBACZ;AACI,UAAI,CAACL,EAAI;AACL,cAAM,IAAI,MAAM,cAAc;AAElC,UAAIY;AACJ,UAAI;AACA,cAAMC,IAAO,OAAOb,EAAI,QAAS,aAAa,MAAMA,EAAI,SAASA,EAAI;AACrE,QAAAY,IAAO,OAAOC,KAAS,WAAW,KAAK,MAAMA,CAAI,IAAIA;AAAA,MACzE,QAC4B;AACR,cAAM,IAAI,MAAM,sBAAsB;AAAA,MAC1D;AACgB,UAAI,CAACpB,EAASmB,CAAI;AACd,cAAM,IAAI,MAAM,6BAA6B;AAEjD,MAAAL,EAAW,gBAAgBK,EAAK,eAChCL,EAAW,QAAQK,EAAK,OACxBL,EAAW,YAAYK,EAAK,WAC5BL,EAAW,aAAaK,EAAK;AAC7B;AAAA,IAChB;AAAA,IACQ;AACI,aAAO;AAAA,QACH;AAAA,QACA;AAAA,UACI,QAAQ;AAAA,UACR,YAAY;AAAA,QACf;AAAA,MACJ;AAAA,EACb;AACI,MAAIL,EAAW,SAAS;AACpB,UAAM,IAAI,MAAM,eAAe;AACnC,MAAI,OAAOA,EAAW,SAAU;AAC5B,UAAM,IAAI,MAAM,eAAe;AACnC,MAAIA,EAAW,aAAa,SACvB,OAAOA,EAAW,aAAc,YAC7B,MAAM,QAAQA,EAAW,SAAS;AACtC,UAAM,IAAI,MAAM,mBAAmB;AAEvC,MAAIA,EAAW,iBAAiB,QAC5B,OAAOA,EAAW,iBAAkB;AACpC,UAAM,IAAI,MAAM,uBAAuB;AAE3C,MAAIA,EAAW,cAAc,SACxB,OAAOA,EAAW,cAAe,YAC9B,MAAM,QAAQA,EAAW,UAAU;AACvC,UAAM,IAAI,MAAM,oBAAoB;AAGxC,SAAOA;AACX;AAwDO,SAASO,GAAcC,GAAS;AACnC,QAAM,EAAE,QAAAC,GAAQ,SAAAC,GAASC,UAAAA,IAAWC,IAAiB,iBAAAC,IAAkB,CAAA,YAAIC,IAAUC,IAAgBC,OAAAA,IAAQC,IAAcC,iBAAAA,IAAkBC,IAAwB,WAAAC,GAAW,aAAAC,GAAa,aAAAC,GAAa,aAAAC,IAAc,CAACC,MAAQA,GAAK,oBAAoBC,IAA4BjC,GAAqB,IAAGgB;AAC9S,SAAO,eAAuBf,GAAK;AAC/B,QAAIiC,IAAoB;AACxB,UAAMC,KAAW5B,GAAUN,GAAK,QAAQ,KAAK,OACxC,QAAQ,OAAO,EAAE,EACjB,YAAW,EACX,MAAM,GAAG;AACd,eAAWmC,KAAUD,GAAS;AAG1B,YAAM,CAAC9B,GAAW,GAAGgC,CAAM,IAAID,EAAO,MAAM,GAAG,GACzC9B,KAAW+B,KAAW,OAA4B,SAASA,EAAO,KAAK,CAACC,MAAUA,EAAM,SAAS,UAAU,CAAC,MAAM;AACxH,UAAIjC,MAAc,uCACdC,MAAY,iBAAiB;AAC7B,QAAA4B,IAAoB;AACpB;AAAA,MAChB;AAEY,WAAK7B,MAAc,sBACfA,MAAc,mBACdA,MAAc,WACbC,MAAY,mBAAmBA,MAAY,iBAAiB;AAC7D,QAAA4B,IAAoB;AACpB;AAAA,MAChB;AAAA,IACA;AACQ,QAAI,CAACA;AACD,aAAO;AAAA,QACH;AAAA,QACA;AAAA,UACI,QAAQ;AAAA,UACR,YAAY;AAAA,UACZ,SAAS;AAAA,YACL,QAAQ;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAEL,QAAIG;AACJ,QAAI;AACA,UAAIE,IAAc,MAAMN,EAA0BhC,CAAG;AAGrD,UAFKsC,MACDA,IAAc,MAAMvC,GAAmBC,CAAG,IAC1CH,EAAWyC,CAAW;AACtB,eAAOA;AACX,MAAAF,IAASE;AAAA,IACrB,SACeP,GAAK;AACR,aAAOQ,EAAaR,GAAKE,GAAmBH,CAAW;AAAA,IACnE;AACQ,QAAIU;AACJ,UAAMC,IAAqB,OAAOb,KAAgB,OAAiC,SAASA,EAAY5B,GAAKoC,CAAM;AACnH,QAAIvC,EAAW4C,CAAkB;AAC7B,aAAOA;AACN,QAAI9C,GAAkB8C,CAAkB,KACzCC,GAAiBD,CAAkB;AACnC,aAAOF,EAAaE,GAAoBR,GAAmBH,CAAW;AACrE,QAAIW;AACL,MAAAD,IAAOC;AAAA,SACN;AACD,UAAI,CAACzB;AACD,cAAM,IAAI,MAAM,oCAAoC;AACxD,YAAM,EAAE,eAAA2B,GAAe,OAAAC,GAAO,WAAAlC,EAAW,IAAG0B;AAC5C,UAAIS;AACJ,UAAI;AACA,QAAAA,IAAWtB,EAAMqB,CAAK;AAAA,MACtC,SACmBb,GAAK;AACR,eAAOQ,EAAaR,GAAKE,GAAmBH,CAAW;AAAA,MACvE;AACY,YAAMgB,IAAe,OAAO7B,KAAY,aAAa,MAAMA,EAAQjB,GAAKoC,CAAM,IAAInB;AAClF,UAAIpB,EAAWiD,CAAY;AACvB,eAAOA;AACX,YAAMC,IAAoB;AAAA,QACtB,eAAAJ;AAAA,QACA,UAAAE;AAAA,QACA,gBAAgBnC;AAAA,QAChB,cAAcoC;AAAA,MACjB;AACD,UAAI,OAAO9B,KAAW,YAAY;AAC9B,cAAMgC,IAAc,MAAMhC,EAAOhB,GAAK+C,CAAiB;AACvD,YAAIlD,EAAWmD,CAAW;AACtB,iBAAOA;AACX,QAAAR,IAAO,OAAO,OAAO,OAAO,OAAO,IAAIO,CAAiB,GAAG,EAAE,QAAQC,GAAa;AAAA,MAClG;AAEgB,QAAAR,IAAO,OAAO,OAAO,OAAO,OAAO,CAAA,GAAIO,CAAiB,GAAG,EAAE,QAAA/B,GAAQ;AAEzE,UAAIiC,IAAQC;AACZ,MAAI,OAAO9B,KAAoB,aAC3B6B,IAAQ,MAAM7B,EAAgBpB,GAAKwC,GAAMU,EAAc,IAGvDD,IAAQ,CAAC,GAAGA,GAAO,GAAG7B,CAAe;AAEzC,YAAM+B,KAAiBjC,EAASsB,EAAK,QAAQA,EAAK,UAAUS,CAAK;AACjE,UAAIE,GAAe;AACf,eAAOZ,EAAaY,IAAgBlB,GAAmBH,CAAW;AAAA,IAElF;AACQ,QAAIsB;AACJ,QAAI;AACA,YAAMC,IAAM5B,EAAgBe,EAAK,UAAUA,EAAK,aAAa;AAC7D,UAAI,CAACa;AACD,cAAM;AACV,MAAAD,IAAYC,EAAI;AAAA,IAC5B,QACmB;AACP,aAAOd,EAAa,IAAIe,EAAa,gCAAgC,GAAGrB,GAAmBH,CAAW;AAAA,IAClH;AACQ,QAAIsB,MAAc;AACd,aAAOb,EAAa,IAAIe,EAAa,iCAAiC,GAAGrB,GAAmBH,CAAW;AAI3G,QAAIsB,MAAc,cAAcpD,EAAI,WAAW;AAC3C,aAAO;AAAA,QACH,KAAK,UAAU;AAAA,UACX,QAAQ,CAAC,IAAIsD,EAAa,mCAAmC,CAAC;AAAA,QAClF,CAAiB;AAAA,QACD;AAAA,UACI,QAAQ;AAAA,UACR,YAAY;AAAA,UACZ,SAAS;AAAA,YACL,OAAO;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAKL,QAHM,eAAed,MACjBA,EAAK,YAAYb,IAEjB,EAAE,kBAAkBa,IAAO;AAC3B,YAAMM,IAAe,OAAO7B,KAAY,aAAa,MAAMA,EAAQjB,GAAKoC,CAAM,IAAInB;AAClF,UAAIpB,EAAWiD,CAAY;AACvB,eAAOA;AACX,MAAAN,EAAK,eAAeM;AAAA,IAChC;AACQ,QAAIS,IAAS,MAAMlC,EAAQmB,CAAI;AAC/B,UAAMgB,IAAwB,OAAO3B,KAAgB,OAAiC,SAASA,EAAY7B,GAAKwC,GAAMe,CAAM;AAC5H,WAAI1D,EAAW2D,CAAqB,IACzBA,KACFA,MACLD,IAASC,IACT5D,GAAgB2D,CAAM,IACfhB,EAAa,IAAIe,EAAa,iCAAiC,GAAGrB,GAAmBH,CAAW,IAEpGS,EAAagB,GAAQtB,GAAmBH,CAAW;AAAA,EAC7D;AACL;AAYA,SAASS,EAAakB,GAAgBxB,GAAmBH,GAAa;AAClE,MAAI2B,aAA0B;AAAA,EAE1B,CAACC,EAAeD,CAAc;AAC9B,WAAO;AAAA,MACH,KAAK,UAAU,EAAE,QAAQ,CAAC3B,EAAY2B,CAAc,CAAC,EAAG,GAAEE,CAAiB;AAAA,MAC3E;AAAA,QACI,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,SAAS;AAAA,UACL,gBAAgB;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAEL,QAAMC,IAASF,EAAeD,CAAc,IACtC,CAACA,CAAc,IACff,GAAiBe,CAAc,IAC3BA,IACA;AACV,SAAIG,IACO;AAAA,IACH,KAAK,UAAU,EAAE,QAAQA,EAAO,IAAI9B,CAAW,EAAG,GAAE6B,CAAiB;AAAA,IACrE,OAAO,OAAO,OAAO,OAAO,CAAA,GAAK1B,MAAsB,qBACjD;AAAA,MACE,QAAQ;AAAA,MACR,YAAY;AAAA,IAChC,IACkB;AAAA,MACE,QAAQ;AAAA,MACR,YAAY;AAAA,IAChC,CAAmB,GAAE,EAAE,SAAS;AAAA,MACZ,gBAAgBA,MAAsB,qBAChC,oCACA;AAAA,IAC1B,GAAmB;AAAA,EACV,IAEE;AAAA,IACH,KAAK,UAAU,YAAYwB,KAAkBA,EAAe,SACtD,OAAO,OAAO,OAAO,OAAO,CAAE,GAAEA,CAAc,GAAG,EAAE,QAAQA,EAAe,OAAO,IAAI3B,CAAW,EAAC,CAAE,IAAI2B,GAAgBE,CAAiB;AAAA,IAC9I;AAAA,MACI,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,SAAS;AAAA,QACL,gBAAgB1B,MAAsB,qBAChC,oCACA;AAAA,MACT;AAAA,IACJ;AAAA,EACJ;AACL;AACA,SAAS3B,GAAUN,GAAK6D,GAAK;AACzB,SAAI,OAAO7D,EAAI,QAAQ,OAAQ,aACpBA,EAAI,QAAQ,IAAI6D,CAAG,IAEvB,OAAO7D,EAAI,OAAO,EAAE6D,CAAG;AAClC;AACA,SAASnB,GAAiBoB,GAAK;AAC3B,SAAQ,MAAM,QAAQA,CAAG,KACrBA,EAAI,SAAS;AAAA,EAEbA,EAAI,KAAKJ,CAAc;AAC/B;AACA,SAASA,EAAeI,GAAK;AACzB,SAAOA,aAAeR;AAC1B;AACA,SAASK,EAAkBI,GAE3BrE,GAAK;AACD,SAAIA,aAAe;AAAA,EAEf,CAACgE,EAAehE,CAAG,IAEZ;AAAA;AAAA,IAEH,SAHUA,EAGK;AAAA;AAAA,EAElB,IAEEA;AACX;AC9WO,SAASoB,GAAcC,GAAS;AACnC,QAAMiD,IAASC,GAAiBlD,CAAO;AACvC,SAAO,eAA+Bf,GAAKkE,GAAK;AAC5C,QAAI;AACA,YAAM,CAACrD,GAAMf,CAAI,IAAI,MAAMkE,EAAOG,GAAUnE,GAAKkE,CAAG,CAAC;AACrD,MAAAA,EAAI,UAAUpE,EAAK,QAAQA,EAAK,YAAYA,EAAK,OAAO,EAAE,IAAIe,CAAI;AAAA,IAC9E,SACekB,GAAK;AAGR,cAAQ,MAAM,sFAC2BA,CAAG,GAC5CmC,EAAI,UAAU,GAAG,EAAE,IAAK;AAAA,IACpC;AAAA,EACK;AACL;AACA,SAASC,GAAUnE,GAAKkE,GAAK;AACzB,SAAO;AAAA,IACH,KAAKlE,EAAI;AAAA,IACT,QAAQA,EAAI;AAAA,IACZ,SAASA,EAAI;AAAA,IACb,MAAM,MACEA,EAAI,OAEGA,EAAI,OAER,IAAI,QAAQ,CAACoE,MAAY;AAC5B,UAAIvD,IAAO;AACX,MAAAb,EAAI,YAAY,OAAO,GACvBA,EAAI,GAAG,QAAQ,CAACqE,MAAWxD,KAAQwD,CAAM,GACzCrE,EAAI,GAAG,OAAO,MAAMoE,EAAQvD,CAAI,CAAC;AAAA,IACjD,CAAa;AAAA,IAEL,KAAKb;AAAA,IACL,SAAS,EAAE,KAAAkE,EAAK;AAAA,EACnB;AACL;ACrGA,IAAII;AAAA,CAEH,SAAUA,GAAM;AACf,EAAAA,EAAK,OAAU,QACfA,EAAK,WAAc,YACnBA,EAAK,uBAA0B,uBAC/BA,EAAK,sBAAyB,sBAC9BA,EAAK,gBAAmB,gBACxBA,EAAK,QAAW,SAChBA,EAAK,WAAc,YACnBA,EAAK,kBAAqB,kBAC1BA,EAAK,kBAAqB,kBAC1BA,EAAK,sBAAyB,sBAC9BA,EAAK,WAAc,YACnBA,EAAK,MAAS,YACdA,EAAK,QAAW,cAChBA,EAAK,SAAY,eACjBA,EAAK,UAAa,gBAClBA,EAAK,OAAU,aACfA,EAAK,OAAU,aACfA,EAAK,OAAU,aACfA,EAAK,SAAY,eACjBA,EAAK,eAAkB,eACvBA,EAAK,YAAe,aACpBA,EAAK,aAAgB,aACrBA,EAAK,YAAe,YACpBA,EAAK,gBAAmB,eACxBA,EAAK,oBAAuB,oBAC5BA,EAAK,4BAA+B,2BACpCA,EAAK,yBAA4B,wBACjCA,EAAK,yBAA4B,wBACjCA,EAAK,mBAAsB,mBAC3BA,EAAK,yBAA4B,wBACjCA,EAAK,4BAA+B,2BACpCA,EAAK,wBAA2B,uBAChCA,EAAK,uBAA0B,sBAC/BA,EAAK,wBAA2B,uBAChCA,EAAK,+BAAkC,6BACvCA,EAAK,uBAA0B,uBAC/BA,EAAK,mBAAsB,mBAC3BA,EAAK,wBAA2B,uBAChCA,EAAK,wBAA2B,uBAChCA,EAAK,2BAA8B,0BACnCA,EAAK,uBAA0B,sBAC/BA,EAAK,sBAAyB,qBAC9BA,EAAK,8BAAiC;AACxC,GAAGA,MAASA,IAAO,CAAA,EAAG;AC9CtB,MAAMC,KAA0B,8CAEnBC,KAAkB,CAACC,MACxB,OAAOA,KAAU,YACjB,CAACF,GAAwB,KAAKE,CAAK,IAAU,KACvC,IAAI,KAAKA,CAAK,EACf,kBAAkBA,GAGlBC,IAAc,QAEZC,KAAA,IAAIC,GAAkB;AAAA,EACjC,MAAMF;AAAA,EACN,aAAa;AAAA,EACb,WAAWD,GAAY;AAEZ,WAAA,IAAI,KAAKA,CAAK;AAAA,EACzB;AAAA,EACA,UAAUA,GAAY;AAEd,WAAAD,GAAgBC,CAAK,IAAUA,IAC5BA,EAAM,YAAY;AAAA,EAC7B;AAAA,EACA,aAAapB,GAAK;AAGV,QAAAA,EAAI,SAASiB,EAAK;AAClB,YAAM,IAAIhB;AAAA,QACN,qDAAqDD,EAAI,IAAI;AAAA,QAC7D;AAAA,UACI,OAAO,CAACA,CAAG;AAAA,QAAA;AAAA,MAEnB;AAEJ,QAAI,OAAO,MAAM,KAAK,MAAMA,EAAI,KAAK,CAAC;AAC5B,YAAA,IAAIC,EAAa,iCAAiC;AAAA,QACpD,OAAO,CAACD,CAAG;AAAA,MAAA,CACd;AAEE,WAAA,IAAI,KAAKA,EAAI,KAAK;AAAA,EAAA;AAEjC,CAAC,GC/BKwB,KAAY,CAACJ,MACf,CAAC,OAAO,MAAM,OAAO,WAAWA,CAAK,CAAC,KAAK,OAAO,SAASA,CAAK,GAC9DK,KAAmB,CAACC,MAAkBA,EAAO,MAAMF,EAAS,GAC5DG,KAAY,CAACP,MAAe,OAAO,UAAUA,CAAK,GAClDQ,KAAmB,CAACF,MAAkBA,EAAO,MAAMC,EAAS,GAC5DE,KAAY,CAACT,MAAe,OAAOA,KAAU,WAC7CU,KAAmB,CAACJ,MAAkBA,EAAO,MAAMG,EAAS,GAC5DE,KAAW,CAACX,MAAe,OAAOA,KAAU,UAC5CY,KAAkB,CAACN,MAAkBA,EAAO,MAAMK,EAAQ,GAC1DE,KAAU,CAACb,MAAe,MAAM,QAAQA,CAAK,GAC7Cc,KAAiB,CAACR,MAAkBA,EAAO,MAAMO,EAAO,GACxDE,KAAS,CAACf,MAAeA,aAAiB,QAAQD,GAAgBC,CAAK,GACvEgB,KAAgB,CAACV,MAAkBA,EAAO,MAAMS,EAAM,GACtD/F,KAAW,CAACgF,MACd,OAAO,UAAU,SAAS,KAAKA,CAAK,MAAM,mBACxCiB,KAAkB,CAACX,MAAkBA,EAAO,MAAMtF,EAAQ,GAE1DkG,IAAuB,CACzBC,GACAC,MACEA,IAAa,IAAIC,EAAeF,CAAI,IAAIA,GAE/BG,KAAA,CAACC,GAAcjB,IAAgB,IAAIc,IAAa,OAAU;AACjE,MAAAG,MAAS,QAAQA,EAAK,OAAOA,EAAK,SAAS,CAAC,MAAM;AAC3C,WAAAL,EAAqBM,GAAWJ,CAAU;AAEjD,MAAAd,EAAO,SAAS,GAAG;AACf,QAAAQ,GAAeR,CAAM,GAAG;AACxB,YAAMmB,IAAanB,EAAO,OAAO,CAACoB,GAAKC,OAEnCA,EAAI,QAAQ,CAAC3B,MAAe0B,EAAI,KAAK1B,CAAK,CAAC,GACpC0B,IACR,EAAE;AACD,aAAAhB,GAAiBe,CAAU,IACpBP;AAAA,QACH,IAAIU,EAAYC,CAAc;AAAA,QAC9BT;AAAA,MACJ,IAEAR,GAAgBa,CAAU,IACnBP;AAAA,QACH,IAAIU,EAAYE,CAAa;AAAA,QAC7BV;AAAA,MACJ,IAEAZ,GAAiBiB,CAAU,IACpBP;AAAA,QACH,IAAIU,EAAYG,CAAU;AAAA,QAC1BX;AAAA,MACJ,IAEAf,GAAiBoB,CAAU,IACpBP;AAAA,QACH,IAAIU,EAAYI,CAAY;AAAA,QAC5BZ;AAAA,MACJ,IAEAH,GAAgBQ,CAAU,IACnBP,EAAqBe,GAAab,CAAU,IAEhDF;AAAA,QACH,IAAIU,EAAYE,CAAa;AAAA,QAC7BV;AAAA,MACJ;AAAA,IAAA;AAEA,QAAAV,GAAiBJ,CAAM;AAChB,aAAAY,EAAqBW,GAAgBT,CAAU;AAEtD,QAAAJ,GAAcV,CAAM;AACb,aAAAY,EAAqBhB,IAAUkB,CAAU;AAEhD,QAAAR,GAAgBN,CAAM;AACf,aAAAY,EAAqBY,GAAeV,CAAU;AAErD,QAAAZ,GAAiBF,CAAM;AAChB,aAAAY,EAAqBa,GAAYX,CAAU;AAElD,QAAAf,GAAiBC,CAAM;AAChB,aAAAY,EAAqBc,GAAcZ,CAAU;AAEpD,QAAAH,GAAgBX,CAAM;AACf,aAAAY,EAAqBe,GAAab,CAAU;AAAA,EACvD;AAEG,SAAAF,EAAqBY,GAAeV,CAAU;AACzD,GCtEec,KAAA,CAACC,MACZA,EAAS,OAAO,CAAC7B,GAAQ8B,MAAW;AAChC,aAAWC,KAAa,OAAO,KAAKD,CAAM;AAClC,IAAC9B,EAAO+B,CAAS,MACV/B,EAAA+B,CAAS,IAAI,CAAC,IAErBD,EAAOC,CAAS,KAAK,QACrB/B,EAAO+B,CAAS,EAAE,KAAKD,EAAOC,CAAS,CAAC;AAGzC,SAAA/B;AACX,GAAG,EAAE,GCVTgC,IAAe,CAACH,GAAoBI,IAAgB,OAAS;AACnD,QAAAC,IAAcN,GAAsBC,CAAQ,GAC5CM,IAAWN,EAAS;AACnB,SAAA,OAAO,KAAKK,CAAW,EAAE;AAAA,IAC5B,CAACE,GAAQL,OACLK,EAAOL,CAAS,IAAI;AAAA,MAChB,MAAMf;AAAA,QACFe;AAAA,QACAG,EAAYH,CAAS;AAAA,QACrBE,IACMC,EAAYH,CAAS,EAAE,WAAWI,IAClC;AAAA,MAAA;AAAA,IAEd,GACOC;AAAA,IAEX,CAAA;AAAA,EACJ;AACJ,GCnBaC,KAAyB,CAACvD,MAAgBwD,EAASxD,CAAG,GAOtDyD,IAAiB,CAACzD,MAAgBwD,EAASE,EAAY1D,CAAG,CAAC,GAO3D2D,KAAgB,CAACV,MAC1BW,EAAUX,EAAU,OAAO,GAAGA,EAAU,SAAS,CAAC,CAAC,GAO1CY,KAAyB,CAAC7D,MAAgB,GAAG0D,EAAY1D,CAAG,CAAC,OAO7D8D,KAAiB,CAACb,MAC3BQ,EAAeR,EAAU,OAAO,GAAGA,EAAU,SAAS,CAAC,CAAC,GCD5Dc,KAAe,CAAChH,MACZ,OAAO,KAAKA,CAAI,EACX,IAAI,CAACiH,OAAc;AAAA,EAChB,MAAMR,EAASE,EAAYM,CAAQ,CAAC;AAAA,EACpC,QAAQd,EAAsBnG,EAAKiH,CAAQ,CAAC;AAChD,EAAE,EACD,IAAI,CAACC,MAAe,IAAIC,EAAkBD,CAAU,CAAC,GC9CxDE,KAA8B,CAACpB,MAAuB;AAClD,QAAAK,IAAcN,GAAsBC,CAAQ;AAClD,SAAO,OAAO,KAAKK,CAAW,EAAE,OAAO,CAACE,GAAQL,MAAc;AAC1D,UAAMmB,IAAYlC;AAAA,MACde;AAAA,MACAG,EAAYH,CAAS;AAAA,MACrB;AAAA,IACJ;AAEI,WAAAoB,GAAWD,CAAS,OAIpBA,MAAczB,KACdyB,MAAcxB,KACdwB,MAAc1B,KACd0B,EAAU,SAASvD,OAEnByC,EAAO,GAAGL,CAAS,KAAK,IAAI,EAAE,MAAMmB,EAAU,GAC9Cd,EAAO,GAAGL,CAAS,MAAM,IAAI,EAAE,MAAMmB,EAAU,GAC/Cd,EAAO,GAAGL,CAAS,KAAK,IAAI,EAAE,MAAMmB,EAAU,GAC9Cd,EAAO,GAAGL,CAAS,MAAM,IAAI,EAAE,MAAMmB,EAAU,IAG/CA,MAAc3B,MACda,EAAO,GAAGL,CAAS,MAAM,IAAI,EAAE,MAAMmB,EAAU,KAE5Cd;AAAA,EACX,GAAG,EAAyB;AAChC,GA0DegB,KAAA,CAACvH,MACZ,OAAO,KAAKA,CAAI,EAAE;AAAA,EACd,CAACwH,GAAOvE,MACJ,OAAO,OAAO,CAAA,GAAIuE,GAAO;AAAA,IACrB,CAACd,EAAezD,CAAG,CAAC,GAAG,IAAIwE,GAAuB;AAAA,MAC9C,MAAM,GAAGf,EAAezD,CAAG,CAAC;AAAA,MAC5B,QAAQ,OAAO;AAAA,QACX;AAAA,UACI,GAAG,EAAE,MAAM0C,EAAc;AAAA,QAC7B;AAAA,QACA;AAAA,UACI,KAAK,EAAE,MAAM,IAAIF,EAAYJ,CAAS,EAAE;AAAA,QAC5C;AAAA,QACAc,EAAsBnG,EAAKiD,CAAG,GAAG,EAAK;AAAA,QACtCmE,GAA4BpH,EAAKiD,CAAG,CAAC;AAAA,MAAA;AAAA,IAE5C,CAAA;AAAA,EAAA,CACJ;AAAA,EACL,CAAA;AACJ,GC3HSyE,KAAsB,CAACxB,MAChCA,EAAU,SAAS,KAAK,GCgFbyB,KAAA,CAAC3H,MAAe;AACrB,QAAAwH,IAAQR,GAAiBhH,CAAI,GAC7B4H,IAAcJ,EAAM;AAAA,IACtB,CAACA,GAAOxC,OACJwC,EAAMxC,EAAK,IAAI,IAAIA,GACZwC;AAAAA,IAEX,CAAA;AAAA,EACJ,GAEMK,IAAoBN,GAAuBvH,CAAI,GAE/C8H,IAAmB,IAAIX,EAAkB;AAAA,IAC3C,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ,OAAO,EAAE,MAAMvB,EAAW;AAAA,IAAA;AAAA,EAC9B,CACH,GAEKmC,IAAY,IAAIZ,EAAkB;AAAA,IACpC,MAAM;AAAA,IACN,QAAQK,EAAM;AAAA,MACV,CAACjB,GAAQvB,OACEuB,EAAAvB,EAAK,IAAI,IAAI;AAAA,QAChB,MAAM4C,EAAY5C,EAAK,IAAI;AAAA,QAC3B,MAAM;AAAA,UACF,IAAI,EAAE,MAAM,IAAIE,EAAeG,CAAS,EAAE;AAAA,QAAA;AAAA,MAElD,GACOkB,EAAA,MAAME,EAASI,EAAU7B,EAAK,IAAI,CAAC,CAAC,EAAE,IAAI;AAAA,QAC7C,MAAM,IAAIS,EAAYmC,EAAY5C,EAAK,IAAI,CAAC;AAAA,QAC5C,MAAM;AAAA,UACF,MAAM,EAAE,MAAMY,EAAW;AAAA,UACzB,SAAS,EAAE,MAAMA,EAAW;AAAA,UAC5B,WAAW,EAAE,MAAMD,EAAc;AAAA,UACjC,WAAW,EAAE,MAAMA,EAAc;AAAA,UACjC,QAAQ,EAAE,MAAMkC,EAAkB7C,EAAK,IAAI,EAAE;AAAA,QAAA;AAAA,MAErD,GACOuB,EAAA,OAAOE,EAASI,EAAU7B,EAAK,IAAI,CAAC,CAAC,MAAM,IAAI;AAAA,QAClD,MAAM8C;AAAA,QACN,MAAM;AAAA,UACF,MAAM,EAAE,MAAMlC,EAAW;AAAA,UACzB,SAAS,EAAE,MAAMA,EAAW;AAAA,UAC5B,QAAQ,EAAE,MAAMiC,EAAkB7C,EAAK,IAAI,EAAE;AAAA,QAAA;AAAA,MAErD,GACOuB;AAAA,MAEX,CAAA;AAAA,IAAC;AAAA,EACL,CACH,GAEKyB,IAAe,IAAIb,EAAkB;AAAA,IACvC,MAAM;AAAA,IACN,QAAQK,EAAM;AAAA,MACV,CAACjB,GAAQvB,MAAS;AACd,cAAMiD,IAAaL,EAAY5C,EAAK,IAAI,EAAE,UAAU,GAC9CkD,IAAqB,OAAO,KAAKD,CAAU,EAAE;AAAA,UAC/C,CAACE,GAAGjC,OACEiC,EAAAjC,CAAS,IAAI,OAAO;AAAA,YAClB,CAAC;AAAA,YACD+B,EAAW/B,CAAS;AAAA,YACpB;AAAA,cACI,MACIA,MAAc,QACd+B,EAAW/B,CAAS,EAAE,gBAClBhB,IACE+C,EAAW/B,CAAS,EAAE,KAAK,SAC3B+B,EAAW/B,CAAS,EAAE;AAAA,YAAA;AAAA,UAExC,GACOiC;AAAA,UAEX,CAAA;AAAA,QACJ,GACM,EAAE,IAAAC,GAAI,GAAGC,EAAA,IAAiBJ,GAG1BK,IAAc,OAAO,KAAKD,CAAY,EAAE;AAAA,UAC1C,CAACF,GAAGjC,OACEiC,EAAAjC,CAAS,IAAI,OAAO;AAAA,YAClB,CAAC;AAAA,YACDmC,EAAanC,CAAS;AAAA,UAC1B,GAEO,OAAAiC,EAAEjC,CAAS,EAAE,SACbiC;AAAA,UAEX,CAAA;AAAA,QACJ,GAEMI,IAAsB,IAAId,GAAuB;AAAA,UACnD,MAAM,GAAGzC,EAAK,IAAI;AAAA,UAClB,QAAQsD;AAAA,QAAA,CACX;AAED,eAAA/B,EAAO,SAASvB,EAAK,IAAI,EAAE,IAAI;AAAA,UAC3B,MAAM4C,EAAY5C,EAAK,IAAI;AAAA,UAC3B,MAAMqD;AAAA,QACV,GACA9B,EAAO,aAAavB,EAAK,IAAI,EAAE,IAAI;AAAA,UAC/B,MAAM,IAAIS,EAAYmC,EAAY5C,EAAK,IAAI,CAAC;AAAA,UAC5C,MAAM;AAAA,YACF,MAAM;AAAA,cACF,MAAM,IAAIS,EAAY8C,CAAmB;AAAA,YAAA;AAAA,UAC7C;AAAA,QAER,GACAhC,EAAO,SAASvB,EAAK,IAAI,EAAE,IAAI;AAAA,UAC3B,MAAM4C,EAAY5C,EAAK,IAAI;AAAA,UAC3B,MAAMkD;AAAA,QACV,GACA3B,EAAO,SAASvB,EAAK,IAAI,EAAE,IAAI;AAAA,UAC3B,MAAM4C,EAAY5C,EAAK,IAAI;AAAA,UAC3B,MAAM;AAAA,YACF,IAAI,EAAE,MAAM,IAAIE,EAAeG,CAAS,EAAE;AAAA,UAAA;AAAA,QAElD,GACAkB,EAAO,SAASvB,EAAK,IAAI,EAAE,IAAI;AAAA,UAC3B,MAAM4C,EAAY5C,EAAK,IAAI;AAAA,UAC3B,MAAM;AAAA,YACF,IAAI,EAAE,MAAM,IAAIE,EAAeG,CAAS,EAAE;AAAA,UAAA;AAAA,QAElD,GACOkB;AAAA,MACX;AAAA,MACA,CAAA;AAAA,IAAC;AAAA,EACL,CACH,GAEKnG,IAAS,IAAIoI,GAAc;AAAA,IAC7B,OAAOT;AAAA,IACP,UAAUC;AAAA,EAAA,CACb,GAYKS,IAAkB,OAAO,OAAOb,CAAW,EAAE,OAAO,CAACc,GAAK1D,MAAS;AACjE,QAAA2D,IAAe,GAAGD,CAAG;AACzB,eAAWxC,KAAa,OAAO,KAAKlB,EAAK,UAAW,CAAA,EAAE;AAAA,MAClD0C;AAAA,IAAA,GACD;AACO,YAAAkB,IAAU7B,GAAeb,CAAS,GAClC2C,IAAMhC,EAAU7B,EAAK,SAAA,CAAU;AACrC,MAAA2D,IAAe,GAAGA,CAAY;AAAA,kBACxB3D,CAAI,MAAM4D,CAAO,KAAKA,CAAO;AAAA,kBAC7BA,CAAO,MAAMC,CAAG,MAAM7D,CAAI;AAAA,IAAA;AAE7B,WAAA2D;AAAA,KACR,EAAE;AAEL,SAAOF,IACDK,GAAa1I,GAAQO,GAAM8H,CAAe,CAAC,IAC3CrI;AACV,GClPe2I,KAAA,CACXC,IAAuB,CAAA,GACvBC,IAA8B,OAC7B;AACG,MAAAC,IAAQ,CAAC,GAAGF,CAAU;AAE1B,SAAIC,EAAO,MAEPC,IAAQA,EAAM,OAAO,CAACC,MAAMF,EAAO,IAAI,KAAK,CAACb,MAAYA,KAAMe,EAAE,EAAE,CAAC,KAG7D,OAAA,KAAKF,CAAM,EACb,OAAO,CAAChG,MAAQA,MAAQ,GAAG,EAC3B,QAAQ,CAACA,MAAQ;AACd,QAAIA,EAAI,QAAQ,MAAM,MAAM,IAAI;AAE5B,YAAMmG,IAAUnG,EAAI,QAAQ,WAAW,EAAE;AACjC,MAAAiG,IAAAA,EAAM,OAAO,CAACC,MAEdF,EAAOhG,CAAG,aAAa,QACvB,OAAOkG,EAAEC,CAAO,KAAM,WAGfD,EAAEC,CAAO,KAAKH,EAAOhG,CAAG,EAAE,YAAY,IAG1CkG,EAAEC,CAAO,KAAKH,EAAOhG,CAAG,CAClC;AACD;AAAA,IAAA;AAEJ,QAAIA,EAAI,QAAQ,MAAM,MAAM,IAAI;AAE5B,YAAMmG,IAAUnG,EAAI,QAAQ,WAAW,EAAE;AACjC,MAAAiG,IAAAA,EAAM,OAAO,CAACC,MAEdF,EAAOhG,CAAG,aAAa,QACvB,OAAOkG,EAAEC,CAAO,KAAM,WAEfD,EAAEC,CAAO,KAAKH,EAAOhG,CAAG,EAAE,YAAY,IAE1CkG,EAAEC,CAAO,KAAKH,EAAOhG,CAAG,CAClC;AACD;AAAA,IAAA;AAEJ,QAAIA,EAAI,QAAQ,MAAM,MAAM,IAAI;AAE5B,YAAMmG,IAAUnG,EAAI,QAAQ,WAAW,EAAE;AACjC,MAAAiG,IAAAA,EAAM,OAAO,CAACC,MAEdF,EAAOhG,CAAG,aAAa,QACvB,OAAOkG,EAAEC,CAAO,KAAM,WAEfD,EAAEC,CAAO,KAAKH,EAAOhG,CAAG,EAAE,YAAY,IAE1CkG,EAAEC,CAAO,KAAKH,EAAOhG,CAAG,CAClC;AACD;AAAA,IAAA;AAEJ,QAAIA,EAAI,QAAQ,KAAK,MAAM,IAAI;AAE3B,YAAMmG,IAAUnG,EAAI,QAAQ,UAAU,EAAE;AAChC,MAAAiG,IAAAA,EAAM,OAAO,CAACC,MAEdF,EAAOhG,CAAG,aAAa,QACvB,OAAOkG,EAAEC,CAAO,KAAM,WAEfD,EAAEC,CAAO,IAAIH,EAAOhG,CAAG,EAAE,YAAY,IAEzCkG,EAAEC,CAAO,IAAIH,EAAOhG,CAAG,CACjC;AACD;AAAA,IAAA;AAEJ,QAAIA,EAAI,QAAQ,KAAK,MAAM,IAAI;AAE3B,YAAMmG,IAAUnG,EAAI,QAAQ,UAAU,EAAE;AAChC,MAAAiG,IAAAA,EAAM,OAAO,CAACC,MAEdF,EAAOhG,CAAG,aAAa,QACvB,OAAOkG,EAAEC,CAAO,KAAM,WAEfD,EAAEC,CAAO,IAAIH,EAAOhG,CAAG,EAAE,YAAY,IAEzCkG,EAAEC,CAAO,IAAIH,EAAOhG,CAAG,CACjC;AACD;AAAA,IAAA;AAGJ,IAAI,MAAM,QAAQgG,EAAOhG,CAAG,CAAC,IACjBiG,IAAAA,EAAM,OAAO,CAACG,MACd,MAAM,QAAQA,EAAKpG,CAAG,CAAC,IAEhBgG,EAAOhG,CAAG,EAAE;AAAA,MAAM,CAACqG,MACtBD,EAAKpG,CAAG,EAAE,KAAK,CAACsG,MAERD,aAAa,QACb,OAAOC,KAAc,WAGdA,KAAaD,EAAE,YAAY,IAG/BC,KAAaD,CACvB;AAAA,IACL,IAIAL,EAAOhG,CAAG,EAAE,OAAO,CAACqG,MAEZA,aAAa,QACb,OAAOD,EAAKpG,CAAG,KAAM,WAGdoG,EAAKpG,CAAG,KAAKqG,EAAE,YAAY,IAG/BA,KAAKD,EAAKpG,CAAG,CACvB,EAAE,SAAS,CAEnB,IAEOiG,IAAAA,EAAM,OAAO,CAACC,MAEdF,EAAOhG,CAAG,aAAa,QACvB,OAAOkG,EAAElG,CAAG,KAAM,WAGXkG,EAAElG,CAAG,KAAKgG,EAAOhG,CAAG,EAAE,YAAY,IAEtCgG,EAAOhG,CAAG,aAAa;AAAA;AAAA,MAExB,CAACkG,EAAElG,CAAG,KAAK,CAACgG,EAAOhG,CAAG;AAAA;AAAA;AAAA,MAEtBkG,EAAElG,CAAG,KAAKgG,EAAOhG,CAAG;AAAA,KAC7B;AAAA,EACL,CACH,GAEDgG,EAAO,MACPC,IAAQA,EAAM;AAAA,IAAO,CAACC,MAClB,OAAO,KAAKA,CAAC,EAAE;AAAA,MAAK,CAAClG,MACjB;;AAAA,gBAAA5D,IAAA8J,EAAElG,CAAG,MAAL,gBAAA5D,EACM,WACD,cACA,SAAS4J,EAAO,EAAE,YAAa;AAAA;AAAA,IAAA;AAAA,EAE5C,KAIDC;AACX,GCtJAM,KAAe,CAACR,IAAuB,OACnC,CACIS,GACA;AAAA,EACI,WAAAC;AAAA,EACA,WAAAC,IAAY;AAAA,EACZ,MAAAC;AAAA,EACA,SAAAC,IAAU;AAAA,EACV,QAAAZ,IAAS,CAAA;AACb,MAOC;AACG,MAAAC,IAAQ,CAAC,GAAGF,CAAU;AAE1B,MAAIU,GAAW;AAEX,UAAMI,IAAYH,EAAU,YAAY,KAAK,QAAQ,IAAI;AACzD,IAAAT,IAAQA,EAAM,KAAK,CAACa,GAAGC,MACfD,EAAEL,CAAS,IAAIM,EAAEN,CAAS,IACnBI,IAEPC,EAAEL,CAAS,IAAIM,EAAEN,CAAS,IACnB,KAAKI,IAET,CACV;AAAA,EAAA;AAGG,SAAAZ,IAAAH,GAAaG,GAAOD,CAAM,GAE9BW,MAAS,UAAaC,MACtBX,IAAQA,EAAM,MAAMU,IAAOC,GAASD,IAAOC,IAAUA,CAAO,IAGzDX;AACX,GCxCWe,KAAA,CAACjB,MACZ,CAACS,GAAQ,EAAE,QAAAR,IAAS,UAGT,EAAE,OAFKF,GAAaC,GAAYC,CAAM,EAEvB,OAAO,ICLtBiB,KAAA,CAAClB,IAAuB,OACnC,CAACS,GAAQ,EAAE,IAAArB,EAAG;AAAA;AAAA,EAEVY,EAAW,KAAK,CAACG,MAAMA,EAAE,MAAMf,CAAE;AAAA,GCH1B+B,KAAA,CAACnB,IAAuB,CAAA,MACnC,CAACS,GAAQxD,MAAmB;AAClB,QAAAmE,IACFpB,EAAW,SAAS,IACdA,EAAWA,EAAW,SAAS,CAAC,EAAE,KAAK,IACvC,GACJqB,IAAY,OAAO,OAAO,IAAIpE,GAAQ,EAAE,IAAIA,EAAO,MAAMmE,GAAO;AACtE,SAAApB,EAAW,KAAKqB,CAAS,GAClBA;AACX,GCRWC,KAAA,CAACtB,IAAuB,CAAA,MACnC,CAACS,GAAQzD,MACEA,EAAS,KAAK,IAAI,CAACuE,MAAMJ,GAAOnB,CAAU,EAAE,MAAMuB,CAAC,CAAC,GCHpDC,KAAA,CAACxB,IAAuB,CAAA,MACnC,CAACS,GAAQjI,MAAmB;AACxB,MAAIiJ;AACA,MAAAjJ,EAAO,MAAM,MAAM;AACb,UAAAkJ,IAAWlJ,EAAO,GAAG,SAAS,GAC9BmJ,IAAgB3B,EAAW;AAAA,MAC7B,CAACuB,MAAMA,EAAE,MAAM,QAAQA,EAAE,GAAG,eAAeG;AAAA,IAC/C;AACA,IAAIC,MAAkB,OACP3B,EAAA2B,CAAa,IAAI,OAAO;AAAA,MAC/B,CAAC;AAAA,MACD3B,EAAW2B,CAAa;AAAA,MACxBnJ;AAAA,IACJ,GACAiJ,IAAgBzB,EAAW2B,CAAa;AAAA,EAC5C;AAEG,SAAAF;AACX,GClBWG,KAAA,CAAC5B,IAAuB,CAAC,MACpC,CAACS,GAAQ,EAAE,IAAArB,QAAuB;AAC9B,MAAIyC;AACJ,MAAIzC,KAAM,MAAM;AACN,UAAAsC,IAAWtC,EAAG,SAAS,GACvBuC,IAAgB3B,EAAW;AAAA,MAC7B,CAACuB,MAAMA,EAAE,MAAM,QAAQA,EAAE,GAAG,eAAeG;AAAA,IAC/C;AAEA,IAAIC,MAAkB,OAClBE,IAAgB7B,EAAW,OAAO2B,GAAe,CAAC,EAAE,CAAC;AAAA,EACzD;AAEG,SAAAE;AACX,GCsCJC,KAAe,CAACC,GAAoB/K,MAAoC;AAEpE,QAAMgL,IADe,OAAO,KAAK7E,EAAsBnG,EAAK+K,CAAU,CAAC,CAAC,EAChC,OAAOrD,EAAmB,EAAE;AAAA,IAChE,CAACuD,GAAW/E,MACR,OAAO,OAAO,CAAA,GAAI+E,GAAW;AAAA,MACzB,CAAClE,GAAeb,CAAS,CAAC,GAAG,CAACD,MAC1BjG,EAAK4G,GAAcV,CAAS,CAAC,EAAE;AAAA,QAC3B,CAACgF;AAAA;AAAA,UAEGA,EAAc,MAAMjF,EAAOC,CAAS;AAAA;AAAA,MAAA;AAAA,IAC5C,CACP;AAAA,IACL,CAAA;AAAA,EACJ,GACMiF,IAAerE,GAAuBiE,CAAU,GAEhDK,IAAyB,CAACL,MAC5B,OAAO,KAAK5E,EAAsBnG,EAAK+K,CAAU,CAAC,CAAC,EAAE;AAAA,IACjDI;AAAA,EACJ,GAGEE,IADW,OAAO,KAAKrL,CAAI,EACG,OAAOoL,CAAsB,EAAE;AAAA,IAC/D,CAACH,GAAWF,MACR,OAAO,OAAO,CAAA,GAAIE,GAAW;AAAA,MACzB,CAACzE,GAAuBuE,CAAU,CAAC,GAAG,CAAC9E,MACnCjG,EAAK+K,CAAU,EAAE;AAAA;AAAA,QAEb,CAACO,MAAWA,EAAOH,CAAY,KAAKlF,EAAO;AAAA,MAAA;AAAA,IAC/C,CACP;AAAA,IACL,CAAA;AAAA,EACJ;AAEA,SAAO,OAAO,OAAO,IAAI+E,GAAoBK,CAAkB;AACnE,GCrFAE,KAAe,CAACnG,GAAcpF,MAC1B,OAAO,OAAOuH,GAAuBvH,CAAI,CAAC,EAAE;AAAA,EACxC,CAACwL,GAASxG,MACFwG,IAAgB,KACb,OAAO,OAAOxG,EAAK,UAAA,CAAW,EAAE;AAAA,IACnC,CAACyG,GAAcC,MACPD,IAAqB,KAElBC,EAAM,KAAK,QAAQtG;AAAA,IAE9B;AAAA,EACJ;AAAA,EAEJ;AACJ,GCFEuG,KAAoB,CAACZ,GAAoB/K,OAAoB;AAAA,EAC/D,CAAC,MAAM6G,EAAUkE,CAAU,CAAC,EAAE,GAAGvB,GAAIxJ,CAAI;AAAA,EACzC,CAAC,OAAO6G,EAAUkE,CAAU,CAAC,MAAM,GAAGd,GAAKjK,CAAI;AAAA,EAC/C,CAAC+K,CAAU,GAAGb,GAAOlK,CAAI;AAC7B,IAEM4L,KAAuB,CAACb,GAAoB/K,OAAoB;AAAA,EAClE,CAAC,SAAS+K,CAAU,EAAE,GAAGZ,GAAOnK,CAAI;AAAA,EACpC,CAAC,aAAa+K,CAAU,EAAE,GAAGT,GAAWtK,CAAI;AAAA,EAC5C,CAAC,SAAS+K,CAAU,EAAE,GAAGP,GAAOxK,CAAI;AAAA,EACpC,CAAC,SAAS+K,CAAU,EAAE,GAAGH,GAAO5K,CAAI;AAAA,EACpC,CAAC,SAAS+K,CAAU,EAAE,GAAGH,GAAO5K,CAAI;AACxC,IAEe6L,KAAA,CAAC7L,MACL,OAAO;AAAA,EACV,CAAC;AAAA,EACD;AAAA,IACI,OAAO,OAAO,KAAKA,CAAI,EAAE;AAAA,MACrB,CAACiL,GAAWhI,MACR,OAAO;AAAA,QACH,CAAC;AAAA,QACDgI;AAAA,QACAU,GAAkBjF,EAAezD,CAAG,GAAGjD,EAAKiD,CAAG,CAAC;AAAA,MACpD;AAAA,MACJ,CAAA;AAAA,IACJ;AAAA,IACA,UAAU,OAAO,KAAKjD,CAAI,EAAE;AAAA,MACxB,CAACiL,GAAWhI,MACR,OAAO;AAAA,QACH,CAAC;AAAA,QACDgI;AAAA,QACAW,GAAqBlF,EAAezD,CAAG,GAAGjD,EAAKiD,CAAG,CAAC;AAAA,MACvD;AAAA,MACJ,CAAA;AAAA,IAAC;AAAA,EAET;AAAA,EACA,OAAO,KAAKjD,CAAI,EAAE;AAAA,IACd,CAACiL,GAAWhI,MACR,OAAO,OAAO,CAAA,GAAIgI,GAAW;AAAA,MACzB,CAACvE,EAAezD,CAAG,CAAC,GAAG6H,GAAe7H,GAAKjD,CAAI;AAAA,IAAA,CAClD;AAAA,IACL,CAAA;AAAA,EACJ;AAAA,EACAuL,GAAQzH,GAAa9D,CAAI,IAAI,EAAE,MAAM+D,GAAA,IAAa,CAAC;AAAA;AAAA,EACnDwH,GAAQ,QAAQvL,CAAI,IAAI,EAAE,MAAM8F,EAAA,IAAgB,CAAA;AAAA;AACpD,GCZJgG,KAAe,CAAC9L,MACZ+L,GAAqB;AAAA,EACjB,UAAUC,GAAYrE,GAAkB3H,CAAI,CAAC;AAAA,EAC7C,WAAW6L,GAAS7L,CAAI;AAC5B,CAAC,GAIQiM,KAAiB,CAACjM,OAAgB;AAAA,EAC3C,UAAUgM,GAAYrE,GAAkB3H,CAAI,CAAC;AAAA,EAC7C,WAAW6L,GAAS7L,CAAI;AAC5B,IC3DakM,KAA2B,CAACzC,GAAGnG,OACpCA,EAAA,UAAU,KAAK,QAAW;AAAA,EAC1B,gBAAgB;AAAA,CACnB,GACMA,EAAI;AAAA,EACP6I,GAAgB;AAAA,IACZ,UAAU;AAAA,EACb,CAAA;AACL,IAGEA,KAAkB,CAAC,EAAE,UAAAC,QAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA6DhDA,CAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UCxBTC,KAAA,CAACrM,MAAe;AAC3B,QAAMsM,IAAiBpM,GAAc;AAAA,IACjC,QAAQ4L,GAAc9L,CAAI;AAAA,EAAA,CAC7B;AAUM,SAR4B,CAACZ,GAAKkE,GAAKiJ,MACtCnN,EAAI,GAAG,kBAAkB,IAClBkN,EAAelN,GAAKkE,GAAKiJ,CAAI,IAGjCL,GAAgB9M,GAAKkE,CAAS;AAI7C,GC7DakJ,KAAoBV;","x_google_ignoreList":[0,1,2,3]}